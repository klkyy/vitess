// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DO = 57376
const DISTINCTROW = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const SQL_CALC_FOUND_ROWS = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const ID = 57399
const AT_ID = 57400
const AT_AT_ID = 57401
const HEX = 57402
const STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const XOR = 57417
const AND = 57418
const NOT = 57419
const BETWEEN = 57420
const CASE = 57421
const WHEN = 57422
const THEN = 57423
const ELSE = 57424
const END = 57425
const LE = 57426
const GE = 57427
const NE = 57428
const NULL_SAFE_EQUAL = 57429
const IS = 57430
const LIKE = 57431
const REGEXP = 57432
const IN = 57433
const SHIFT_LEFT = 57434
const SHIFT_RIGHT = 57435
const DIV = 57436
const MOD = 57437
const UNARY = 57438
const COLLATE = 57439
const BINARY = 57440
const UNDERSCORE_BINARY = 57441
const UNDERSCORE_UTF8MB4 = 57442
const UNDERSCORE_UTF8 = 57443
const UNDERSCORE_LATIN1 = 57444
const INTERVAL = 57445
const JSON_EXTRACT_OP = 57446
const JSON_UNQUOTE_EXTRACT_OP = 57447
const CREATE = 57448
const ALTER = 57449
const DROP = 57450
const RENAME = 57451
const ANALYZE = 57452
const ADD = 57453
const FLUSH = 57454
const SCHEMA = 57455
const TABLE = 57456
const INDEX = 57457
const VIEW = 57458
const TO = 57459
const IGNORE = 57460
const IF = 57461
const UNIQUE = 57462
const PRIMARY = 57463
const COLUMN = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const KEY_BLOCK_SIZE = 57467
const CHECK = 57468
const INDEXES = 57469
const ACTION = 57470
const CASCADE = 57471
const CONSTRAINT = 57472
const FOREIGN = 57473
const NO = 57474
const REFERENCES = 57475
const RESTRICT = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const MAXVALUE = 57485
const PARTITION = 57486
const REORGANIZE = 57487
const LESS = 57488
const THAN = 57489
const PROCEDURE = 57490
const TRIGGER = 57491
const VINDEX = 57492
const VINDEXES = 57493
const STATUS = 57494
const VARIABLES = 57495
const WARNINGS = 57496
const SEQUENCE = 57497
const BEGIN = 57498
const START = 57499
const TRANSACTION = 57500
const COMMIT = 57501
const ROLLBACK = 57502
const SAVEPOINT = 57503
const RELEASE = 57504
const WORK = 57505
const BIT = 57506
const TINYINT = 57507
const SMALLINT = 57508
const MEDIUMINT = 57509
const INT = 57510
const INTEGER = 57511
const BIGINT = 57512
const INTNUM = 57513
const REAL = 57514
const DOUBLE = 57515
const FLOAT_TYPE = 57516
const DECIMAL = 57517
const NUMERIC = 57518
const TIME = 57519
const TIMESTAMP = 57520
const DATETIME = 57521
const YEAR = 57522
const CHAR = 57523
const VARCHAR = 57524
const BOOL = 57525
const CHARACTER = 57526
const VARBINARY = 57527
const NCHAR = 57528
const TEXT = 57529
const TINYTEXT = 57530
const MEDIUMTEXT = 57531
const LONGTEXT = 57532
const BLOB = 57533
const TINYBLOB = 57534
const MEDIUMBLOB = 57535
const LONGBLOB = 57536
const JSON = 57537
const ENUM = 57538
const GEOMETRY = 57539
const POINT = 57540
const LINESTRING = 57541
const POLYGON = 57542
const GEOMETRYCOLLECTION = 57543
const MULTIPOINT = 57544
const MULTILINESTRING = 57545
const MULTIPOLYGON = 57546
const NULLX = 57547
const AUTO_INCREMENT = 57548
const APPROXNUM = 57549
const SIGNED = 57550
const UNSIGNED = 57551
const ZEROFILL = 57552
const COLLATION = 57553
const DATABASES = 57554
const SCHEMAS = 57555
const TABLES = 57556
const VITESS_METADATA = 57557
const VSCHEMA = 57558
const FULL = 57559
const PROCESSLIST = 57560
const COLUMNS = 57561
const FIELDS = 57562
const ENGINES = 57563
const PLUGINS = 57564
const EXTENDED = 57565
const NAMES = 57566
const CHARSET = 57567
const GLOBAL = 57568
const SESSION = 57569
const ISOLATION = 57570
const LEVEL = 57571
const READ = 57572
const WRITE = 57573
const ONLY = 57574
const REPEATABLE = 57575
const COMMITTED = 57576
const UNCOMMITTED = 57577
const SERIALIZABLE = 57578
const CURRENT_TIMESTAMP = 57579
const DATABASE = 57580
const CURRENT_DATE = 57581
const CURRENT_TIME = 57582
const LOCALTIME = 57583
const LOCALTIMESTAMP = 57584
const UTC_DATE = 57585
const UTC_TIME = 57586
const UTC_TIMESTAMP = 57587
const REPLACE = 57588
const CONVERT = 57589
const CAST = 57590
const SUBSTR = 57591
const SUBSTRING = 57592
const GROUP_CONCAT = 57593
const SEPARATOR = 57594
const TIMESTAMPADD = 57595
const TIMESTAMPDIFF = 57596
const MATCH = 57597
const AGAINST = 57598
const BOOLEAN = 57599
const LANGUAGE = 57600
const WITH = 57601
const QUERY = 57602
const EXPANSION = 57603
const UNUSED = 57604
const ARRAY = 57605
const CUME_DIST = 57606
const DESCRIPTION = 57607
const DENSE_RANK = 57608
const EMPTY = 57609
const EXCEPT = 57610
const FIRST_VALUE = 57611
const GROUPING = 57612
const GROUPS = 57613
const JSON_TABLE = 57614
const LAG = 57615
const LAST_VALUE = 57616
const LATERAL = 57617
const LEAD = 57618
const MEMBER = 57619
const NTH_VALUE = 57620
const NTILE = 57621
const OF = 57622
const OVER = 57623
const PERCENT_RANK = 57624
const RANK = 57625
const RECURSIVE = 57626
const ROW_NUMBER = 57627
const SYSTEM = 57628
const WINDOW = 57629
const ACTIVE = 57630
const ADMIN = 57631
const BUCKETS = 57632
const CLONE = 57633
const COMPONENT = 57634
const DEFINITION = 57635
const ENFORCED = 57636
const EXCLUDE = 57637
const FOLLOWING = 57638
const GEOMCOLLECTION = 57639
const GET_MASTER_PUBLIC_KEY = 57640
const HISTOGRAM = 57641
const HISTORY = 57642
const INACTIVE = 57643
const INVISIBLE = 57644
const LOCKED = 57645
const MASTER_COMPRESSION_ALGORITHMS = 57646
const MASTER_PUBLIC_KEY_PATH = 57647
const MASTER_TLS_CIPHERSUITES = 57648
const MASTER_ZSTD_COMPRESSION_LEVEL = 57649
const NESTED = 57650
const NETWORK_NAMESPACE = 57651
const NOWAIT = 57652
const NULLS = 57653
const OJ = 57654
const OLD = 57655
const OPTIONAL = 57656
const ORDINALITY = 57657
const ORGANIZATION = 57658
const OTHERS = 57659
const PATH = 57660
const PERSIST = 57661
const PERSIST_ONLY = 57662
const PRECEDING = 57663
const PRIVILEGE_CHECKS_USER = 57664
const PROCESS = 57665
const RANDOM = 57666
const REFERENCE = 57667
const REQUIRE_ROW_FORMAT = 57668
const RESOURCE = 57669
const RESPECT = 57670
const RESTART = 57671
const RETAIN = 57672
const REUSE = 57673
const ROLE = 57674
const SECONDARY = 57675
const SECONDARY_ENGINE = 57676
const SECONDARY_LOAD = 57677
const SECONDARY_UNLOAD = 57678
const SKIP = 57679
const SRID = 57680
const THREAD_PRIORITY = 57681
const TIES = 57682
const UNBOUNDED = 57683
const VCPU = 57684
const VISIBLE = 57685
const FORMAT = 57686
const TREE = 57687
const VITESS = 57688
const TRADITIONAL = 57689

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 42,
	33, 307,
	132, 307,
	144, 307,
	169, 321,
	170, 321,
	-2, 309,
	-1, 47,
	134, 331,
	-2, 329,
	-1, 70,
	38, 367,
	-2, 375,
	-1, 387,
	120, 698,
	-2, 694,
	-1, 388,
	120, 699,
	-2, 695,
	-1, 402,
	38, 368,
	-2, 380,
	-1, 403,
	38, 369,
	-2, 381,
	-1, 426,
	88, 951,
	-2, 72,
	-1, 427,
	88, 867,
	-2, 73,
	-1, 432,
	88, 835,
	-2, 660,
	-1, 434,
	88, 898,
	-2, 662,
	-1, 754,
	56, 54,
	58, 54,
	-2, 58,
	-1, 931,
	120, 701,
	-2, 697,
	-1, 1359,
	5, 619,
	17, 619,
	19, 619,
	31, 619,
	59, 619,
	-2, 406,
}

const yyPrivate = 57344

const yyLast = 17848

var yyAct = [...]int{

	387, 1598, 1588, 1398, 1555, 1286, 331, 1036, 1191, 1471,
	1458, 1504, 603, 1211, 346, 1339, 1009, 1065, 360, 1192,
	1340, 1372, 1032, 1336, 1045, 1059, 1237, 587, 1079, 317,
	1345, 69, 3, 1351, 1035, 721, 1305, 89, 872, 918,
	1263, 280, 1179, 300, 280, 753, 682, 1254, 1049, 89,
	853, 280, 1130, 1011, 395, 767, 731, 431, 404, 995,
	726, 1006, 895, 951, 925, 333, 27, 728, 1075, 389,
	748, 556, 766, 420, 425, 747, 280, 89, 988, 738,
	557, 280, 318, 280, 412, 321, 278, 65, 881, 428,
	417, 329, 756, 695, 601, 67, 313, 64, 1591, 7,
	576, 1575, 70, 322, 6, 5, 1586, 1563, 1583, 696,
	1098, 1399, 1574, 1562, 1322, 1428, 561, 276, 272, 273,
	274, 419, 268, 1026, 1097, 266, 558, 270, 560, 410,
	1367, 1368, 390, 72, 73, 74, 75, 76, 1027, 1028,
	1366, 323, 372, 320, 378, 379, 376, 377, 375, 374,
	373, 768, 616, 769, 319, 91, 92, 93, 380, 381,
	1245, 29, 1058, 58, 32, 33, 1096, 1530, 644, 643,
	653, 654, 646, 647, 648, 649, 650, 651, 652, 645,
	1461, 1288, 655, 1066, 1419, 29, 30, 58, 32, 33,
	1417, 310, 91, 92, 93, 1225, 880, 312, 1224, 308,
	614, 1226, 611, 842, 62, 841, 612, 609, 610, 34,
	53, 54, 57, 56, 1290, 615, 928, 604, 605, 1093,
	1090, 1091, 839, 1089, 1585, 269, 91, 92, 93, 1582,
	1548, 1556, 43, 1050, 1285, 1606, 57, 1289, 882, 883,
	884, 840, 275, 989, 843, 1602, 577, 267, 563, 599,
	270, 1291, 846, 618, 830, 1505, 1100, 1103, 1052, 1513,
	1212, 1214, 1362, 593, 566, 595, 1361, 280, 568, 569,
	1507, 1282, 280, 1360, 578, 559, 283, 1284, 280, 271,
	667, 668, 1149, 1110, 280, 585, 1109, 1052, 591, 1146,
	1537, 1441, 1273, 89, 1221, 89, 1095, 592, 594, 1033,
	1184, 89, 36, 37, 39, 38, 41, 1159, 55, 1138,
	762, 742, 567, 89, 89, 680, 596, 575, 1094, 91,
	92, 93, 583, 582, 1269, 1270, 1271, 645, 1022, 584,
	655, 42, 61, 60, 655, 1561, 51, 52, 40, 1052,
	873, 1506, 1213, 968, 877, 1531, 624, 867, 598, 629,
	630, 79, 44, 45, 1546, 46, 47, 48, 49, 1099,
	600, 1600, 1051, 800, 1601, 573, 1599, 1066, 1514, 1512,
	902, 91, 92, 93, 1101, 579, 580, 581, 91, 92,
	93, 1283, 589, 1281, 900, 901, 899, 590, 635, 606,
	80, 1051, 667, 668, 665, 617, 1272, 1522, 952, 667,
	668, 1277, 1274, 1265, 1275, 1268, 1324, 1264, 1349, 770,
	636, 1266, 1267, 89, 627, 280, 280, 280, 59, 625,
	626, 973, 974, 719, 89, 1276, 628, 874, 683, 632,
	89, 832, 1385, 570, 868, 571, 428, 1055, 572, 634,
	632, 1607, 59, 1051, 1056, 635, 323, 788, 1048, 1046,
	952, 1047, 1156, 1243, 1551, 693, 635, 718, 1044, 1050,
	745, 735, 754, 732, 1566, 1467, 588, 698, 700, 702,
	704, 706, 708, 709, 633, 634, 632, 746, 633, 634,
	632, 724, 727, 699, 701, 1608, 705, 707, 801, 710,
	1466, 1258, 635, 1257, 1246, 720, 635, 1568, 765, 646,
	647, 648, 649, 650, 651, 652, 645, 755, 1547, 655,
	1484, 760, 1464, 265, 814, 817, 818, 819, 820, 821,
	822, 1255, 823, 824, 825, 826, 827, 802, 803, 804,
	805, 786, 787, 815, 562, 789, 1120, 790, 791, 792,
	793, 794, 795, 796, 797, 798, 799, 806, 807, 808,
	809, 810, 811, 812, 813, 858, 280, 890, 892, 893,
	828, 89, 399, 831, 891, 833, 280, 280, 89, 89,
	89, 633, 634, 632, 280, 1519, 1144, 280, 1143, 1326,
	280, 851, 852, 1518, 280, 1381, 89, 414, 415, 635,
	57, 89, 89, 89, 280, 89, 89, 633, 634, 632,
	1337, 778, 898, 1348, 1145, 89, 89, 816, 1123, 1124,
	1125, 834, 835, 1053, 857, 635, 1510, 1584, 730, 844,
	564, 565, 419, 1570, 399, 850, 644, 643, 653, 654,
	646, 647, 648, 649, 650, 651, 652, 645, 1180, 863,
	655, 855, 653, 654, 646, 647, 648, 649, 650, 651,
	652, 645, 1510, 1559, 655, 829, 919, 896, 1348, 633,
	634, 632, 836, 837, 838, 921, 970, 847, 648, 649,
	650, 651, 652, 645, 859, 1437, 655, 635, 66, 89,
	856, 1510, 399, 1131, 992, 860, 861, 862, 631, 864,
	865, 1510, 1538, 929, 1521, 940, 943, 1389, 875, 869,
	870, 953, 1510, 1509, 897, 982, 969, 91, 92, 93,
	992, 920, 89, 89, 1456, 1455, 885, 886, 887, 888,
	91, 92, 93, 1443, 399, 633, 634, 632, 1440, 399,
	89, 930, 399, 683, 91, 92, 93, 280, 931, 1229,
	89, 1391, 1390, 635, 57, 280, 91, 92, 93, 68,
	1228, 935, 981, 280, 280, 929, 555, 280, 280, 922,
	923, 280, 280, 280, 89, 1387, 1388, 1387, 1386, 932,
	1180, 938, 939, 965, 981, 399, 428, 89, 557, 961,
	962, 1025, 984, 975, 1007, 992, 399, 631, 399, 1037,
	990, 983, 981, 987, 29, 997, 1000, 1001, 1002, 998,
	931, 999, 1003, 1018, 1162, 1352, 1353, 777, 776, 1067,
	1068, 1069, 1061, 1062, 1063, 1064, 1348, 1161, 1017, 985,
	855, 1016, 1019, 757, 1491, 981, 758, 392, 1072, 1073,
	1074, 280, 89, 1015, 89, 1020, 1102, 1024, 1023, 757,
	280, 280, 280, 280, 280, 57, 280, 280, 971, 1040,
	280, 89, 845, 29, 991, 1031, 1081, 1306, 763, 349,
	348, 351, 352, 353, 354, 29, 758, 280, 350, 355,
	1576, 759, 280, 761, 280, 280, 1084, 1186, 57, 280,
	89, 1287, 992, 1187, 1473, 1104, 1105, 1106, 1107, 1108,
	1060, 1111, 1112, 1077, 1078, 1113, 1448, 1080, 1308, 388,
	1117, 936, 937, 1377, 57, 942, 945, 946, 1352, 1353,
	1474, 759, 1115, 757, 1232, 1076, 57, 1116, 896, 1071,
	1070, 1083, 1593, 1589, 1121, 1379, 1085, 1355, 1087, 1337,
	960, 1259, 878, 963, 964, 1310, 90, 1314, 849, 1309,
	281, 1307, 1203, 281, 1201, 1114, 1312, 1204, 90, 1202,
	281, 1205, 1358, 1001, 1002, 1311, 405, 997, 1000, 1001,
	1002, 998, 1126, 999, 1003, 897, 1357, 1200, 1313, 1315,
	406, 1199, 1580, 1573, 1330, 281, 90, 733, 734, 408,
	281, 407, 281, 280, 1169, 729, 1578, 1178, 1177, 948,
	1140, 1250, 775, 280, 280, 280, 280, 280, 1193, 390,
	722, 1168, 1139, 949, 405, 280, 586, 1242, 1553, 280,
	1552, 1173, 723, 280, 1155, 1489, 1240, 280, 406, 1234,
	1188, 1435, 1469, 1176, 1086, 402, 403, 408, 848, 407,
	1005, 1175, 1172, 396, 1227, 1434, 89, 1157, 1181, 397,
	1210, 1433, 1183, 1230, 1182, 1233, 393, 394, 1037, 1238,
	1238, 68, 1333, 1180, 1170, 1171, 727, 613, 1217, 399,
	1219, 1150, 1220, 1206, 1195, 1196, 1216, 1198, 1194, 1595,
	1594, 1197, 1147, 871, 736, 1595, 1239, 1535, 1218, 1247,
	1248, 1222, 1462, 967, 89, 89, 392, 66, 1249, 71,
	1251, 1252, 1253, 63, 1, 1587, 1235, 1236, 956, 644,
	643, 653, 654, 646, 647, 648, 649, 650, 651, 652,
	645, 288, 1400, 655, 89, 1470, 1092, 1554, 1262, 1256,
	643, 653, 654, 646, 647, 648, 649, 650, 651, 652,
	645, 1278, 1503, 655, 1371, 1043, 1034, 78, 554, 89,
	77, 1545, 866, 1135, 1136, 919, 597, 1042, 1041, 1511,
	1460, 1302, 1054, 1244, 1293, 1294, 1057, 1378, 1241, 1550,
	783, 781, 782, 780, 1153, 785, 281, 784, 398, 779,
	293, 281, 1327, 423, 879, 280, 1304, 281, 309, 1261,
	1295, 1004, 1317, 281, 1316, 89, 771, 1082, 737, 81,
	89, 89, 90, 1193, 90, 1338, 1280, 1302, 1279, 1088,
	90, 876, 1301, 290, 607, 608, 1341, 1303, 1292, 295,
	930, 663, 90, 90, 1174, 1223, 89, 931, 429, 422,
	1331, 1323, 1343, 972, 725, 1432, 1332, 1154, 692, 950,
	89, 1356, 89, 89, 1347, 751, 1238, 1238, 332, 1370,
	889, 1325, 1037, 347, 1037, 344, 1363, 345, 976, 1185,
	637, 1384, 330, 324, 750, 743, 996, 994, 1374, 993,
	280, 1365, 1375, 1376, 1369, 1334, 418, 1354, 1350, 749,
	1382, 1383, 980, 401, 1427, 1529, 400, 947, 50, 620,
	280, 314, 31, 409, 22, 1364, 89, 21, 1401, 89,
	89, 89, 280, 1393, 20, 19, 18, 24, 17, 16,
	15, 1431, 574, 35, 26, 1392, 25, 14, 1394, 13,
	1396, 12, 90, 11, 281, 281, 281, 10, 9, 8,
	4, 1406, 1407, 90, 623, 1395, 23, 681, 2, 90,
	0, 0, 1412, 1413, 0, 1414, 0, 1405, 1416, 1415,
	1418, 0, 644, 643, 653, 654, 646, 647, 648, 649,
	650, 651, 652, 645, 0, 1193, 655, 0, 1410, 0,
	0, 0, 1436, 0, 0, 0, 0, 0, 1445, 0,
	89, 0, 0, 0, 0, 0, 0, 1230, 89, 0,
	0, 0, 1037, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 1457,
	89, 0, 0, 0, 1463, 0, 1465, 0, 0, 0,
	0, 1429, 1472, 0, 1477, 1444, 0, 0, 0, 1454,
	0, 0, 0, 0, 0, 0, 0, 323, 0, 0,
	0, 1476, 0, 0, 1446, 0, 0, 1447, 0, 0,
	1449, 89, 89, 0, 89, 0, 1475, 0, 0, 89,
	0, 89, 89, 89, 280, 281, 1341, 89, 1490, 1497,
	90, 1498, 1500, 1501, 0, 281, 281, 90, 90, 90,
	1502, 1492, 0, 281, 89, 280, 281, 1515, 1508, 281,
	0, 1488, 1483, 281, 1523, 90, 1516, 1468, 1517, 0,
	90, 90, 90, 281, 90, 90, 0, 0, 0, 1496,
	0, 0, 0, 0, 90, 90, 1544, 1536, 0, 0,
	1341, 89, 0, 0, 0, 1543, 1542, 0, 1487, 323,
	1524, 0, 89, 89, 0, 0, 0, 0, 0, 0,
	1558, 1557, 0, 0, 1472, 1037, 0, 1425, 89, 0,
	0, 0, 1193, 0, 1564, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 89, 1430, 0,
	0, 0, 0, 0, 0, 1572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1577, 1579, 89, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 1581, 0, 0,
	1592, 0, 0, 0, 1567, 0, 0, 1603, 0, 644,
	643, 653, 654, 646, 647, 648, 649, 650, 651, 652,
	645, 90, 90, 655, 91, 92, 93, 644, 643, 653,
	654, 646, 647, 648, 649, 650, 651, 652, 645, 90,
	0, 655, 0, 0, 0, 0, 281, 0, 0, 90,
	0, 0, 0, 0, 281, 0, 0, 0, 0, 0,
	0, 0, 281, 281, 0, 0, 281, 281, 0, 0,
	281, 281, 281, 90, 0, 0, 0, 0, 284, 0,
	639, 0, 642, 0, 0, 0, 90, 287, 656, 657,
	658, 659, 660, 661, 662, 294, 640, 641, 638, 644,
	643, 653, 654, 646, 647, 648, 649, 650, 651, 652,
	645, 0, 0, 655, 644, 643, 653, 654, 646, 647,
	648, 649, 650, 651, 652, 645, 0, 0, 655, 292,
	1424, 0, 0, 0, 0, 299, 0, 0, 0, 0,
	281, 90, 0, 90, 0, 0, 0, 0, 0, 281,
	281, 281, 281, 281, 0, 281, 281, 0, 0, 281,
	90, 0, 0, 0, 0, 285, 1423, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 281, 0, 0, 0,
	0, 281, 0, 281, 281, 0, 0, 0, 281, 90,
	933, 934, 296, 301, 302, 1422, 297, 298, 306, 0,
	0, 0, 289, 291, 303, 0, 286, 305, 304, 0,
	644, 643, 653, 654, 646, 647, 648, 649, 650, 651,
	652, 645, 0, 0, 655, 0, 0, 0, 966, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 361, 28, 0, 644, 643, 653, 654,
	646, 647, 648, 649, 650, 651, 652, 645, 0, 0,
	655, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 28, 0, 0, 644, 643, 653, 654, 646,
	647, 648, 649, 650, 651, 652, 645, 0, 0, 655,
	0, 0, 281, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 281, 281, 281, 281, 281, 1296, 0, 391,
	0, 0, 0, 0, 281, 0, 0, 0, 281, 0,
	0, 0, 281, 0, 0, 0, 281, 644, 643, 653,
	654, 646, 647, 648, 649, 650, 651, 652, 645, 0,
	0, 655, 1132, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 358, 644, 643, 653, 654, 646, 647, 648, 649,
	650, 651, 652, 645, 0, 0, 655, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 90, 0, 0, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	1133, 0, 0, 0, 1134, 0, 0, 0, 430, 0,
	0, 0, 0, 0, 0, 1141, 1142, 0, 90, 0,
	0, 1148, 0, 0, 1151, 1152, 0, 0, 0, 0,
	0, 0, 1158, 0, 0, 0, 1160, 0, 0, 1163,
	1164, 1165, 1166, 1167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 90,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1208, 1209, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 602, 0, 602, 90,
	0, 90, 90, 0, 602, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 28, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 281,
	0, 664, 666, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 90, 0, 0, 90, 90,
	90, 281, 679, 0, 0, 0, 684, 685, 686, 687,
	688, 689, 690, 691, 0, 694, 697, 697, 697, 703,
	697, 697, 703, 697, 711, 712, 713, 714, 715, 716,
	717, 0, 0, 326, 0, 28, 0, 0, 0, 0,
	0, 0, 0, 0, 1299, 1300, 0, 0, 0, 0,
	0, 0, 0, 0, 430, 0, 430, 0, 0, 752,
	0, 0, 430, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 619, 621, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1359,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 90, 0, 90, 0, 0, 0, 0, 90, 0,
	90, 90, 90, 281, 0, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 740, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 281, 430, 0, 0, 0, 0,
	0, 772, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 602, 0, 0, 0, 0, 0,
	1409, 602, 602, 602, 1411, 0, 0, 0, 0, 0,
	90, 0, 0, 0, 0, 1420, 1421, 0, 0, 602,
	0, 90, 90, 0, 602, 602, 602, 0, 602, 602,
	0, 0, 0, 0, 0, 0, 0, 90, 602, 602,
	0, 1438, 1439, 0, 1442, 0, 0, 0, 281, 0,
	0, 0, 0, 0, 0, 0, 90, 0, 0, 0,
	0, 0, 1453, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 430, 0, 0, 0, 0, 0, 0, 430,
	430, 430, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 430, 0, 0,
	0, 0, 430, 430, 430, 0, 430, 430, 0, 1499,
	0, 0, 0, 0, 0, 0, 430, 430, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1525, 1526, 1527,
	1528, 0, 1532, 0, 1533, 1534, 1008, 0, 0, 0,
	752, 0, 0, 0, 752, 0, 0, 1539, 0, 1540,
	1541, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1560, 0,
	924, 0, 430, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 954, 0, 0, 0,
	0, 0, 0, 1569, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 958, 959, 602, 0, 602, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 977, 0, 0, 602, 0, 0, 0, 0, 0,
	0, 740, 0, 0, 430, 1604, 1605, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 430, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1137, 0, 0, 391, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 430, 0, 430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 430, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 752, 0, 0, 0,
	0, 0, 1189, 1190, 0, 0, 752, 752, 752, 752,
	752, 1122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1008, 0, 1215, 0, 0, 0, 0, 359,
	752, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 894, 0, 0, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 307, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 957, 413, 0, 0, 421, 0, 0, 0, 0,
	279, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 954, 0, 0, 0, 602, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 430, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1342, 0, 28, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1260, 430, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 430, 0, 0, 0, 0, 279, 0, 0, 0,
	0, 279, 0, 0, 1127, 1128, 1129, 279, 0, 0,
	0, 0, 0, 279, 0, 0, 430, 0, 954, 0,
	0, 1344, 1346, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1426, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1346, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 430, 0, 430, 1373, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1450, 1451, 1452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 602, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1397, 0, 0,
	1402, 1403, 1404, 0, 0, 0, 0, 0, 0, 0,
	0, 413, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 279, 279, 0, 0, 0,
	0, 1342, 0, 28, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	954, 0, 0, 1520, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 430, 0, 0, 0, 1342, 0, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 430, 0, 0, 0, 0, 0,
	0, 430, 0, 0, 0, 1297, 1298, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1318, 1319, 0, 1320, 1321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1328, 1329, 0, 0, 0,
	0, 0, 1493, 1494, 0, 1495, 0, 0, 0, 0,
	1459, 0, 1459, 1459, 1459, 279, 0, 0, 1373, 0,
	0, 0, 0, 0, 0, 279, 279, 0, 0, 1590,
	0, 0, 0, 279, 0, 1459, 279, 0, 0, 279,
	0, 0, 0, 854, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1549, 0, 0, 0, 1380, 0, 0, 0,
	0, 0, 0, 430, 430, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 954, 0, 1565,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1571, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1408, 0, 0, 0, 0, 0, 0, 0, 1459, 413,
	854, 0, 0, 0, 413, 413, 0, 0, 413, 413,
	413, 0, 0, 0, 955, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 413, 413, 413, 413, 413, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 0, 0, 0,
	0, 0, 854, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 279, 1013, 0, 0, 279, 279, 0, 0,
	279, 1021, 854, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1478, 1479, 1480, 1481,
	1482, 0, 0, 0, 1485, 1486, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	279, 279, 279, 279, 0, 279, 279, 0, 0, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 0, 0, 0,
	0, 279, 0, 1118, 1119, 0, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 413, 413, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1596, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 413, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 955, 279, 279, 279, 279, 279, 0, 0, 0,
	0, 0, 0, 0, 1207, 0, 0, 0, 279, 0,
	0, 0, 1013, 0, 0, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 854,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 955, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 955, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1013, 0, 0, 0, 0, 0, 540,
	528, 0, 485, 543, 458, 475, 551, 476, 479, 516,
	443, 498, 179, 473, 279, 462, 438, 469, 439, 460,
	487, 123, 491, 457, 530, 501, 542, 151, 0, 463,
	549, 153, 507, 0, 226, 167, 0, 0, 0, 489,
	532, 496, 525, 484, 517, 448, 506, 544, 474, 514,
	545, 0, 0, 0, 91, 92, 93, 0, 1038, 1039,
	0, 0, 0, 0, 0, 113, 0, 511, 539, 471,
	513, 515, 553, 437, 508, 955, 441, 444, 550, 535,
	466, 467, 1231, 0, 0, 0, 0, 0, 279, 488,
	497, 522, 482, 0, 0, 0, 0, 0, 0, 0,
	0, 464, 0, 505, 0, 0, 0, 445, 442, 0,
	0, 0, 0, 486, 0, 0, 0, 447, 0, 465,
	523, 0, 435, 132, 527, 534, 483, 282, 538, 481,
	480, 541, 198, 0, 230, 135, 150, 109, 147, 95,
	105, 0, 134, 176, 206, 210, 531, 461, 470, 117,
	468, 208, 186, 246, 504, 188, 207, 154, 236, 199,
	245, 255, 256, 233, 253, 260, 223, 98, 232, 244,
	114, 218, 0, 0, 0, 100, 242, 229, 165, 144,
	145, 99, 0, 204, 122, 130, 119, 178, 239, 240,
	118, 263, 106, 252, 102, 107, 251, 172, 235, 243,
	166, 159, 101, 241, 164, 158, 149, 126, 137, 196,
	156, 197, 138, 169, 168, 170, 0, 440, 0, 227,
	249, 264, 111, 456, 0, 234, 258, 259, 0, 200,
	112, 131, 125, 195, 129, 171, 108, 140, 224, 148,
	155, 203, 262, 185, 209, 115, 248, 225, 452, 455,
	450, 451, 499, 500, 546, 547, 548, 524, 446, 0,
	453, 454, 0, 529, 536, 537, 503, 94, 103, 152,
	261, 201, 128, 250, 436, 449, 121, 459, 0, 0,
	472, 477, 478, 490, 492, 493, 494, 495, 502, 509,
	510, 512, 518, 519, 520, 521, 526, 533, 552, 96,
	97, 104, 110, 116, 120, 124, 127, 133, 136, 139,
	141, 142, 143, 146, 157, 160, 161, 162, 163, 173,
	174, 175, 177, 180, 181, 182, 183, 184, 187, 189,
	190, 191, 192, 193, 194, 202, 205, 211, 212, 213,
	214, 215, 216, 217, 219, 220, 221, 222, 228, 231,
	237, 238, 247, 254, 257, 540, 528, 0, 485, 543,
	458, 475, 551, 476, 479, 516, 443, 498, 179, 473,
	0, 462, 438, 469, 439, 460, 487, 123, 491, 457,
	530, 501, 542, 151, 0, 463, 549, 153, 507, 0,
	226, 167, 0, 0, 0, 489, 532, 496, 525, 484,
	517, 448, 506, 544, 474, 514, 545, 0, 0, 0,
	91, 92, 93, 0, 1038, 1039, 0, 0, 0, 0,
	0, 113, 0, 511, 539, 471, 513, 515, 553, 437,
	508, 0, 441, 444, 550, 535, 466, 467, 0, 0,
	0, 0, 0, 0, 0, 488, 497, 522, 482, 0,
	0, 0, 0, 0, 0, 0, 0, 464, 0, 505,
	0, 0, 0, 445, 442, 0, 0, 0, 0, 486,
	0, 0, 0, 447, 0, 465, 523, 0, 435, 132,
	527, 534, 483, 282, 538, 481, 480, 541, 198, 0,
	230, 135, 150, 109, 147, 95, 105, 0, 134, 176,
	206, 210, 531, 461, 470, 117, 468, 208, 186, 246,
	504, 188, 207, 154, 236, 199, 245, 255, 256, 233,
	253, 260, 223, 98, 232, 244, 114, 218, 0, 0,
	0, 100, 242, 229, 165, 144, 145, 99, 0, 204,
	122, 130, 119, 178, 239, 240, 118, 263, 106, 252,
	102, 107, 251, 172, 235, 243, 166, 159, 101, 241,
	164, 158, 149, 126, 137, 196, 156, 197, 138, 169,
	168, 170, 0, 440, 0, 227, 249, 264, 111, 456,
	0, 234, 258, 259, 0, 200, 112, 131, 125, 195,
	129, 171, 108, 140, 224, 148, 155, 203, 262, 185,
	209, 115, 248, 225, 452, 455, 450, 451, 499, 500,
	546, 547, 548, 524, 446, 0, 453, 454, 0, 529,
	536, 537, 503, 94, 103, 152, 261, 201, 128, 250,
	436, 449, 121, 459, 0, 0, 472, 477, 478, 490,
	492, 493, 494, 495, 502, 509, 510, 512, 518, 519,
	520, 521, 526, 533, 552, 96, 97, 104, 110, 116,
	120, 124, 127, 133, 136, 139, 141, 142, 143, 146,
	157, 160, 161, 162, 163, 173, 174, 175, 177, 180,
	181, 182, 183, 184, 187, 189, 190, 191, 192, 193,
	194, 202, 205, 211, 212, 213, 214, 215, 216, 217,
	219, 220, 221, 222, 228, 231, 237, 238, 247, 254,
	257, 540, 528, 0, 485, 543, 458, 475, 551, 476,
	479, 516, 443, 498, 179, 473, 0, 462, 438, 469,
	439, 460, 487, 123, 491, 457, 530, 501, 542, 151,
	0, 463, 549, 153, 507, 0, 226, 167, 0, 0,
	0, 489, 532, 496, 525, 484, 517, 448, 506, 544,
	474, 514, 545, 57, 0, 0, 91, 92, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 511,
	539, 471, 513, 515, 553, 437, 508, 0, 441, 444,
	550, 535, 466, 467, 0, 0, 0, 0, 0, 0,
	0, 488, 497, 522, 482, 0, 0, 0, 0, 0,
	0, 0, 0, 464, 0, 505, 0, 0, 0, 445,
	442, 0, 0, 0, 0, 486, 0, 0, 0, 447,
	0, 465, 523, 0, 435, 132, 527, 534, 483, 282,
	538, 481, 480, 541, 198, 0, 230, 135, 150, 109,
	147, 95, 105, 0, 134, 176, 206, 210, 531, 461,
	470, 117, 468, 208, 186, 246, 504, 188, 207, 154,
	236, 199, 245, 255, 256, 233, 253, 260, 223, 98,
	232, 244, 114, 218, 0, 0, 0, 100, 242, 229,
	165, 144, 145, 99, 0, 204, 122, 130, 119, 178,
	239, 240, 118, 263, 106, 252, 102, 107, 251, 172,
	235, 243, 166, 159, 101, 241, 164, 158, 149, 126,
	137, 196, 156, 197, 138, 169, 168, 170, 0, 440,
	0, 227, 249, 264, 111, 456, 0, 234, 258, 259,
	0, 200, 112, 131, 125, 195, 129, 171, 108, 140,
	224, 148, 155, 203, 262, 185, 209, 115, 248, 225,
	452, 455, 450, 451, 499, 500, 546, 547, 548, 524,
	446, 0, 453, 454, 0, 529, 536, 537, 503, 94,
	103, 152, 261, 201, 128, 250, 436, 449, 121, 459,
	0, 0, 472, 477, 478, 490, 492, 493, 494, 495,
	502, 509, 510, 512, 518, 519, 520, 521, 526, 533,
	552, 96, 97, 104, 110, 116, 120, 124, 127, 133,
	136, 139, 141, 142, 143, 146, 157, 160, 161, 162,
	163, 173, 174, 175, 177, 180, 181, 182, 183, 184,
	187, 189, 190, 191, 192, 193, 194, 202, 205, 211,
	212, 213, 214, 215, 216, 217, 219, 220, 221, 222,
	228, 231, 237, 238, 247, 254, 257, 540, 528, 0,
	485, 543, 458, 475, 551, 476, 479, 516, 443, 498,
	179, 473, 0, 462, 438, 469, 439, 460, 487, 123,
	491, 457, 530, 501, 542, 151, 0, 463, 549, 153,
	507, 0, 226, 167, 0, 0, 0, 489, 532, 496,
	525, 484, 517, 448, 506, 544, 474, 514, 545, 0,
	0, 0, 91, 92, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 511, 539, 471, 513, 515,
	553, 437, 508, 0, 441, 444, 550, 535, 466, 467,
	0, 0, 0, 0, 0, 0, 0, 488, 497, 522,
	482, 0, 0, 0, 0, 0, 0, 1335, 0, 464,
	0, 505, 0, 0, 0, 445, 442, 0, 0, 0,
	0, 486, 0, 0, 0, 447, 0, 465, 523, 0,
	435, 132, 527, 534, 483, 282, 538, 481, 480, 541,
	198, 0, 230, 135, 150, 109, 147, 95, 105, 0,
	134, 176, 206, 210, 531, 461, 470, 117, 468, 208,
	186, 246, 504, 188, 207, 154, 236, 199, 245, 255,
	256, 233, 253, 260, 223, 98, 232, 244, 114, 218,
	0, 0, 0, 100, 242, 229, 165, 144, 145, 99,
	0, 204, 122, 130, 119, 178, 239, 240, 118, 263,
	106, 252, 102, 107, 251, 172, 235, 243, 166, 159,
	101, 241, 164, 158, 149, 126, 137, 196, 156, 197,
	138, 169, 168, 170, 0, 440, 0, 227, 249, 264,
	111, 456, 0, 234, 258, 259, 0, 200, 112, 131,
	125, 195, 129, 171, 108, 140, 224, 148, 155, 203,
	262, 185, 209, 115, 248, 225, 452, 455, 450, 451,
	499, 500, 546, 547, 548, 524, 446, 0, 453, 454,
	0, 529, 536, 537, 503, 94, 103, 152, 261, 201,
	128, 250, 436, 449, 121, 459, 0, 0, 472, 477,
	478, 490, 492, 493, 494, 495, 502, 509, 510, 512,
	518, 519, 520, 521, 526, 533, 552, 96, 97, 104,
	110, 116, 120, 124, 127, 133, 136, 139, 141, 142,
	143, 146, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 202, 205, 211, 212, 213, 214, 215,
	216, 217, 219, 220, 221, 222, 228, 231, 237, 238,
	247, 254, 257, 540, 528, 0, 485, 543, 458, 475,
	551, 476, 479, 516, 443, 498, 179, 473, 0, 462,
	438, 469, 439, 460, 487, 123, 491, 457, 530, 501,
	542, 151, 0, 463, 549, 153, 507, 0, 226, 167,
	0, 0, 0, 489, 532, 496, 525, 484, 517, 448,
	506, 544, 474, 514, 545, 0, 0, 0, 91, 92,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 511, 539, 471, 513, 515, 553, 437, 508, 0,
	441, 444, 550, 535, 466, 467, 0, 0, 0, 0,
	0, 0, 0, 488, 497, 522, 482, 0, 0, 0,
	0, 0, 0, 1022, 0, 464, 0, 505, 0, 0,
	0, 445, 442, 0, 0, 0, 0, 486, 0, 0,
	0, 447, 0, 465, 523, 0, 435, 132, 527, 534,
	483, 282, 538, 481, 480, 541, 198, 0, 230, 135,
	150, 109, 147, 95, 105, 0, 134, 176, 206, 210,
	531, 461, 470, 117, 468, 208, 186, 246, 504, 188,
	207, 154, 236, 199, 245, 255, 256, 233, 253, 260,
	223, 98, 232, 244, 114, 218, 0, 0, 0, 100,
	242, 229, 165, 144, 145, 99, 0, 204, 122, 130,
	119, 178, 239, 240, 118, 263, 106, 252, 102, 107,
	251, 172, 235, 243, 166, 159, 101, 241, 164, 158,
	149, 126, 137, 196, 156, 197, 138, 169, 168, 170,
	0, 440, 0, 227, 249, 264, 111, 456, 0, 234,
	258, 259, 0, 200, 112, 131, 125, 195, 129, 171,
	108, 140, 224, 148, 155, 203, 262, 185, 209, 115,
	248, 225, 452, 455, 450, 451, 499, 500, 546, 547,
	548, 524, 446, 0, 453, 454, 0, 529, 536, 537,
	503, 94, 103, 152, 261, 201, 128, 250, 436, 449,
	121, 459, 0, 0, 472, 477, 478, 490, 492, 493,
	494, 495, 502, 509, 510, 512, 518, 519, 520, 521,
	526, 533, 552, 96, 97, 104, 110, 116, 120, 124,
	127, 133, 136, 139, 141, 142, 143, 146, 157, 160,
	161, 162, 163, 173, 174, 175, 177, 180, 181, 182,
	183, 184, 187, 189, 190, 191, 192, 193, 194, 202,
	205, 211, 212, 213, 214, 215, 216, 217, 219, 220,
	221, 222, 228, 231, 237, 238, 247, 254, 257, 540,
	528, 0, 485, 543, 458, 475, 551, 476, 479, 516,
	443, 498, 179, 473, 0, 462, 438, 469, 439, 460,
	487, 123, 491, 457, 530, 501, 542, 151, 0, 463,
	549, 153, 507, 0, 226, 167, 0, 0, 0, 489,
	532, 496, 525, 484, 517, 448, 506, 544, 474, 514,
	545, 0, 0, 0, 91, 92, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 511, 539, 471,
	513, 515, 553, 437, 508, 0, 441, 444, 550, 535,
	466, 467, 0, 0, 0, 0, 0, 0, 0, 488,
	497, 522, 482, 0, 0, 0, 0, 0, 0, 986,
	0, 464, 0, 505, 0, 0, 0, 445, 442, 0,
	0, 0, 0, 486, 0, 0, 0, 447, 0, 465,
	523, 0, 435, 132, 527, 534, 483, 282, 538, 481,
	480, 541, 198, 0, 230, 135, 150, 109, 147, 95,
	105, 0, 134, 176, 206, 210, 531, 461, 470, 117,
	468, 208, 186, 246, 504, 188, 207, 154, 236, 199,
	245, 255, 256, 233, 253, 260, 223, 98, 232, 244,
	114, 218, 0, 0, 0, 100, 242, 229, 165, 144,
	145, 99, 0, 204, 122, 130, 119, 178, 239, 240,
	118, 263, 106, 252, 102, 107, 251, 172, 235, 243,
	166, 159, 101, 241, 164, 158, 149, 126, 137, 196,
	156, 197, 138, 169, 168, 170, 0, 440, 0, 227,
	249, 264, 111, 456, 0, 234, 258, 259, 0, 200,
	112, 131, 125, 195, 129, 171, 108, 140, 224, 148,
	155, 203, 262, 185, 209, 115, 248, 225, 452, 455,
	450, 451, 499, 500, 546, 547, 548, 524, 446, 0,
	453, 454, 0, 529, 536, 537, 503, 94, 103, 152,
	261, 201, 128, 250, 436, 449, 121, 459, 0, 0,
	472, 477, 478, 490, 492, 493, 494, 495, 502, 509,
	510, 512, 518, 519, 520, 521, 526, 533, 552, 96,
	97, 104, 110, 116, 120, 124, 127, 133, 136, 139,
	141, 142, 143, 146, 157, 160, 161, 162, 163, 173,
	174, 175, 177, 180, 181, 182, 183, 184, 187, 189,
	190, 191, 192, 193, 194, 202, 205, 211, 212, 213,
	214, 215, 216, 217, 219, 220, 221, 222, 228, 231,
	237, 238, 247, 254, 257, 540, 528, 0, 485, 543,
	458, 475, 551, 476, 479, 516, 443, 498, 179, 473,
	0, 462, 438, 469, 439, 460, 487, 123, 491, 457,
	530, 501, 542, 151, 0, 463, 549, 153, 507, 0,
	226, 167, 0, 0, 0, 489, 532, 496, 525, 484,
	517, 448, 506, 544, 474, 514, 545, 0, 0, 0,
	91, 92, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 511, 539, 471, 513, 515, 553, 437,
	508, 0, 441, 444, 550, 535, 466, 467, 0, 0,
	0, 0, 0, 0, 0, 488, 497, 522, 482, 0,
	0, 0, 0, 0, 0, 0, 0, 464, 0, 505,
	0, 0, 0, 445, 442, 0, 0, 0, 0, 486,
	0, 0, 0, 447, 0, 465, 523, 0, 435, 132,
	527, 534, 483, 282, 538, 481, 480, 541, 198, 0,
	230, 135, 150, 109, 147, 95, 105, 0, 134, 176,
	206, 210, 531, 461, 470, 117, 468, 208, 186, 246,
	504, 188, 207, 154, 236, 199, 245, 255, 256, 233,
	253, 260, 223, 98, 232, 244, 114, 218, 0, 0,
	0, 100, 242, 229, 165, 144, 145, 99, 0, 204,
	122, 130, 119, 178, 239, 240, 118, 263, 106, 252,
	102, 107, 251, 172, 235, 243, 166, 159, 101, 241,
	164, 158, 149, 126, 137, 196, 156, 197, 138, 169,
	168, 170, 0, 440, 0, 227, 249, 264, 111, 456,
	0, 234, 258, 259, 0, 200, 112, 131, 125, 195,
	129, 171, 108, 140, 224, 148, 155, 203, 262, 185,
	209, 115, 248, 225, 452, 455, 450, 451, 499, 500,
	546, 547, 548, 524, 446, 0, 453, 454, 0, 529,
	536, 537, 503, 94, 103, 152, 261, 201, 128, 250,
	436, 449, 121, 459, 0, 0, 472, 477, 478, 490,
	492, 493, 494, 495, 502, 509, 510, 512, 518, 519,
	520, 521, 526, 533, 552, 96, 97, 104, 110, 116,
	120, 124, 127, 133, 136, 139, 141, 142, 143, 146,
	157, 160, 161, 162, 163, 173, 174, 175, 177, 180,
	181, 182, 183, 184, 187, 189, 190, 191, 192, 193,
	194, 202, 205, 211, 212, 213, 214, 215, 216, 217,
	219, 220, 221, 222, 228, 231, 237, 238, 247, 254,
	257, 540, 528, 0, 485, 543, 458, 475, 551, 476,
	479, 516, 443, 498, 179, 473, 0, 462, 438, 469,
	439, 460, 487, 123, 491, 457, 530, 501, 542, 151,
	0, 463, 549, 153, 507, 0, 226, 167, 0, 0,
	0, 489, 532, 496, 525, 484, 517, 448, 506, 544,
	474, 514, 545, 0, 0, 0, 91, 92, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 511,
	539, 471, 513, 515, 553, 437, 508, 0, 441, 444,
	550, 535, 466, 467, 0, 0, 0, 0, 0, 0,
	0, 488, 497, 522, 482, 0, 0, 0, 0, 0,
	0, 0, 0, 464, 0, 505, 0, 0, 0, 445,
	442, 0, 0, 0, 0, 486, 0, 0, 0, 447,
	0, 465, 523, 0, 435, 132, 527, 534, 483, 282,
	538, 481, 480, 541, 198, 0, 230, 135, 150, 109,
	147, 95, 105, 0, 134, 176, 206, 210, 531, 461,
	470, 117, 468, 208, 186, 246, 504, 188, 207, 154,
	236, 199, 245, 255, 256, 233, 253, 260, 223, 98,
	232, 244, 114, 218, 0, 0, 0, 100, 242, 229,
	165, 144, 145, 99, 0, 204, 122, 130, 119, 178,
	239, 240, 118, 263, 106, 252, 102, 433, 251, 172,
	235, 243, 166, 159, 101, 241, 164, 158, 149, 126,
	137, 196, 156, 197, 138, 169, 168, 170, 0, 440,
	0, 227, 249, 264, 111, 456, 0, 234, 258, 259,
	0, 200, 112, 131, 125, 195, 129, 434, 432, 140,
	224, 148, 155, 203, 262, 185, 209, 115, 248, 225,
	452, 455, 450, 451, 499, 500, 546, 547, 548, 524,
	446, 0, 453, 454, 0, 529, 536, 537, 503, 94,
	103, 152, 261, 201, 128, 250, 436, 449, 121, 459,
	0, 0, 472, 477, 478, 490, 492, 493, 494, 495,
	502, 509, 510, 512, 518, 519, 520, 521, 526, 533,
	552, 96, 97, 104, 110, 116, 120, 124, 127, 133,
	136, 139, 141, 142, 143, 146, 157, 160, 161, 162,
	163, 173, 174, 175, 177, 180, 181, 182, 183, 184,
	187, 189, 190, 191, 192, 193, 194, 202, 205, 211,
	212, 213, 214, 215, 216, 217, 219, 220, 221, 222,
	228, 231, 237, 238, 247, 254, 257, 540, 528, 0,
	485, 543, 458, 475, 551, 476, 479, 516, 443, 498,
	179, 473, 0, 462, 438, 469, 439, 460, 487, 123,
	491, 457, 530, 501, 542, 151, 0, 463, 549, 153,
	507, 0, 226, 167, 0, 0, 0, 489, 532, 496,
	525, 484, 517, 448, 506, 544, 474, 514, 545, 0,
	0, 0, 91, 92, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 511, 539, 471, 513, 515,
	553, 437, 508, 0, 441, 444, 550, 535, 466, 467,
	0, 0, 0, 0, 0, 0, 0, 488, 497, 522,
	482, 0, 0, 0, 0, 0, 0, 0, 0, 464,
	0, 505, 0, 0, 0, 445, 442, 0, 0, 0,
	0, 486, 0, 0, 0, 447, 0, 465, 523, 0,
	435, 132, 527, 534, 483, 282, 538, 481, 480, 541,
	198, 0, 230, 135, 150, 109, 147, 95, 105, 0,
	134, 176, 206, 210, 531, 461, 470, 117, 468, 208,
	186, 246, 504, 188, 207, 154, 236, 199, 245, 255,
	256, 233, 253, 260, 223, 98, 232, 764, 114, 218,
	0, 0, 0, 100, 242, 229, 165, 144, 145, 99,
	0, 204, 122, 130, 119, 178, 239, 240, 118, 263,
	106, 252, 102, 433, 251, 172, 235, 243, 166, 159,
	101, 241, 164, 158, 149, 126, 137, 196, 156, 197,
	138, 169, 168, 170, 0, 440, 0, 227, 249, 264,
	111, 456, 0, 234, 258, 259, 0, 200, 112, 131,
	125, 195, 129, 434, 432, 140, 224, 148, 155, 203,
	262, 185, 209, 115, 248, 225, 452, 455, 450, 451,
	499, 500, 546, 547, 548, 524, 446, 0, 453, 454,
	0, 529, 536, 537, 503, 94, 103, 152, 261, 201,
	128, 250, 436, 449, 121, 459, 0, 0, 472, 477,
	478, 490, 492, 493, 494, 495, 502, 509, 510, 512,
	518, 519, 520, 521, 526, 533, 552, 96, 97, 104,
	110, 116, 120, 124, 127, 133, 136, 139, 141, 142,
	143, 146, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 202, 205, 211, 212, 213, 214, 215,
	216, 217, 219, 220, 221, 222, 228, 231, 237, 238,
	247, 254, 257, 540, 528, 0, 485, 543, 458, 475,
	551, 476, 479, 516, 443, 498, 179, 473, 0, 462,
	438, 469, 439, 460, 487, 123, 491, 457, 530, 501,
	542, 151, 0, 463, 549, 153, 507, 0, 226, 167,
	0, 0, 0, 489, 532, 496, 525, 484, 517, 448,
	506, 544, 474, 514, 545, 0, 0, 0, 91, 92,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 511, 539, 471, 513, 515, 553, 437, 508, 0,
	441, 444, 550, 535, 466, 467, 0, 0, 0, 0,
	0, 0, 0, 488, 497, 522, 482, 0, 0, 0,
	0, 0, 0, 0, 0, 464, 0, 505, 0, 0,
	0, 445, 442, 0, 0, 0, 0, 486, 0, 0,
	0, 447, 0, 465, 523, 0, 435, 132, 527, 534,
	483, 282, 538, 481, 480, 541, 198, 0, 230, 135,
	150, 109, 147, 95, 105, 0, 134, 176, 206, 210,
	531, 461, 470, 117, 468, 208, 186, 246, 504, 188,
	207, 154, 236, 199, 245, 255, 256, 233, 253, 260,
	223, 98, 232, 424, 114, 218, 0, 0, 0, 100,
	242, 229, 165, 144, 145, 99, 0, 204, 122, 130,
	119, 178, 239, 240, 118, 263, 106, 252, 102, 433,
	251, 172, 235, 243, 166, 159, 101, 241, 164, 158,
	149, 126, 137, 196, 156, 197, 138, 169, 168, 170,
	0, 440, 0, 227, 249, 264, 111, 456, 0, 234,
	258, 259, 0, 200, 112, 131, 125, 195, 129, 434,
	432, 427, 426, 148, 155, 203, 262, 185, 209, 115,
	248, 225, 452, 455, 450, 451, 499, 500, 546, 547,
	548, 524, 446, 0, 453, 454, 0, 529, 536, 537,
	503, 94, 103, 152, 261, 201, 128, 250, 436, 449,
	121, 459, 0, 0, 472, 477, 478, 490, 492, 493,
	494, 495, 502, 509, 510, 512, 518, 519, 520, 521,
	526, 533, 552, 96, 97, 104, 110, 116, 120, 124,
	127, 133, 136, 139, 141, 142, 143, 146, 157, 160,
	161, 162, 163, 173, 174, 175, 177, 180, 181, 182,
	183, 184, 187, 189, 190, 191, 192, 193, 194, 202,
	205, 211, 212, 213, 214, 215, 216, 217, 219, 220,
	221, 222, 228, 231, 237, 238, 247, 254, 257, 179,
	0, 0, 926, 0, 328, 0, 0, 0, 123, 0,
	327, 0, 0, 0, 151, 0, 927, 371, 153, 0,
	0, 226, 167, 0, 0, 0, 0, 0, 362, 363,
	0, 0, 0, 0, 0, 0, 0, 0, 57, 0,
	0, 91, 92, 93, 349, 348, 351, 352, 353, 354,
	0, 0, 113, 350, 355, 356, 357, 0, 0, 0,
	0, 325, 342, 0, 370, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 340, 411, 0, 0, 0,
	385, 0, 341, 0, 0, 334, 335, 337, 336, 338,
	343, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 384, 0, 0, 282, 0, 0, 382, 0, 198,
	0, 230, 135, 150, 109, 147, 95, 105, 0, 134,
	176, 206, 210, 0, 0, 0, 117, 0, 208, 186,
	246, 0, 188, 207, 154, 236, 199, 245, 255, 256,
	233, 253, 260, 223, 98, 232, 244, 114, 218, 0,
	0, 0, 100, 242, 229, 165, 144, 145, 99, 0,
	204, 122, 130, 119, 178, 239, 240, 118, 263, 106,
	252, 102, 107, 251, 172, 235, 243, 166, 159, 101,
	241, 164, 158, 149, 126, 137, 196, 156, 197, 138,
	169, 168, 170, 0, 0, 0, 227, 249, 264, 111,
	0, 0, 234, 258, 259, 0, 200, 112, 131, 125,
	195, 129, 171, 108, 140, 224, 148, 155, 203, 262,
	185, 209, 115, 248, 225, 372, 383, 378, 379, 376,
	377, 375, 374, 373, 386, 364, 365, 366, 367, 369,
	0, 380, 381, 368, 94, 103, 152, 261, 201, 128,
	250, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 97, 104, 110,
	116, 120, 124, 127, 133, 136, 139, 141, 142, 143,
	146, 157, 160, 161, 162, 163, 173, 174, 175, 177,
	180, 181, 182, 183, 184, 187, 189, 190, 191, 192,
	193, 194, 202, 205, 211, 212, 213, 214, 215, 216,
	217, 219, 220, 221, 222, 228, 231, 237, 238, 247,
	254, 257, 179, 0, 0, 0, 0, 328, 0, 0,
	0, 123, 0, 327, 0, 0, 0, 151, 0, 0,
	371, 153, 0, 0, 226, 167, 0, 0, 0, 0,
	0, 362, 363, 0, 0, 0, 0, 0, 0, 1029,
	0, 57, 0, 0, 91, 92, 93, 349, 348, 351,
	352, 353, 354, 0, 0, 113, 350, 355, 356, 357,
	1030, 0, 0, 0, 325, 342, 0, 370, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 340, 0,
	0, 0, 0, 385, 0, 341, 0, 0, 334, 335,
	337, 336, 338, 343, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 384, 0, 0, 282, 0, 0,
	382, 0, 198, 0, 230, 135, 150, 109, 147, 95,
	105, 0, 134, 176, 206, 210, 0, 0, 0, 117,
	0, 208, 186, 246, 0, 188, 207, 154, 236, 199,
	245, 255, 256, 233, 253, 260, 223, 98, 232, 244,
	114, 218, 0, 0, 0, 100, 242, 229, 165, 144,
	145, 99, 0, 204, 122, 130, 119, 178, 239, 240,
	118, 263, 106, 252, 102, 107, 251, 172, 235, 243,
	166, 159, 101, 241, 164, 158, 149, 126, 137, 196,
	156, 197, 138, 169, 168, 170, 0, 0, 0, 227,
	249, 264, 111, 0, 0, 234, 258, 259, 0, 200,
	112, 131, 125, 195, 129, 171, 108, 140, 224, 148,
	155, 203, 262, 185, 209, 115, 248, 225, 372, 383,
	378, 379, 376, 377, 375, 374, 373, 386, 364, 365,
	366, 367, 369, 0, 380, 381, 368, 94, 103, 152,
	261, 201, 128, 250, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	97, 104, 110, 116, 120, 124, 127, 133, 136, 139,
	141, 142, 143, 146, 157, 160, 161, 162, 163, 173,
	174, 175, 177, 180, 181, 182, 183, 184, 187, 189,
	190, 191, 192, 193, 194, 202, 205, 211, 212, 213,
	214, 215, 216, 217, 219, 220, 221, 222, 228, 231,
	237, 238, 247, 254, 257, 179, 0, 0, 0, 0,
	328, 0, 0, 0, 123, 0, 327, 0, 0, 0,
	151, 0, 0, 371, 153, 0, 0, 226, 167, 0,
	0, 0, 0, 0, 362, 363, 0, 0, 0, 0,
	0, 0, 0, 0, 57, 0, 399, 91, 92, 93,
	349, 348, 351, 352, 353, 354, 0, 0, 113, 350,
	355, 356, 357, 0, 0, 0, 0, 325, 342, 0,
	370, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	339, 340, 0, 0, 0, 0, 385, 0, 341, 0,
	0, 334, 335, 337, 336, 338, 343, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 384, 0, 0,
	282, 0, 0, 382, 0, 198, 0, 230, 135, 150,
	109, 147, 95, 105, 0, 134, 176, 206, 210, 0,
	0, 0, 117, 0, 208, 186, 246, 0, 188, 207,
	154, 236, 199, 245, 255, 256, 233, 253, 260, 223,
	98, 232, 244, 114, 218, 0, 0, 0, 100, 242,
	229, 165, 144, 145, 99, 0, 204, 122, 130, 119,
	178, 239, 240, 118, 263, 106, 252, 102, 107, 251,
	172, 235, 243, 166, 159, 101, 241, 164, 158, 149,
	126, 137, 196, 156, 197, 138, 169, 168, 170, 0,
	0, 0, 227, 249, 264, 111, 0, 0, 234, 258,
	259, 0, 200, 112, 131, 125, 195, 129, 171, 108,
	140, 224, 148, 155, 203, 262, 185, 209, 115, 248,
	225, 372, 383, 378, 379, 376, 377, 375, 374, 373,
	386, 364, 365, 366, 367, 369, 0, 380, 381, 368,
	94, 103, 152, 261, 201, 128, 250, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 104, 110, 116, 120, 124, 127,
	133, 136, 139, 141, 142, 143, 146, 157, 160, 161,
	162, 163, 173, 174, 175, 177, 180, 181, 182, 183,
	184, 187, 189, 190, 191, 192, 193, 194, 202, 205,
	211, 212, 213, 214, 215, 216, 217, 219, 220, 221,
	222, 228, 231, 237, 238, 247, 254, 257, 179, 0,
	0, 0, 0, 328, 0, 0, 0, 123, 0, 327,
	0, 0, 0, 151, 0, 0, 371, 153, 0, 0,
	226, 167, 0, 0, 0, 0, 0, 362, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 57, 0, 0,
	91, 92, 93, 349, 348, 351, 352, 353, 354, 0,
	0, 113, 350, 355, 356, 357, 0, 0, 0, 0,
	325, 342, 0, 370, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 340, 411, 0, 0, 0, 385,
	0, 341, 0, 0, 334, 335, 337, 336, 338, 343,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	384, 0, 0, 282, 0, 0, 382, 0, 198, 0,
	230, 135, 150, 109, 147, 95, 105, 0, 134, 176,
	206, 210, 0, 0, 0, 117, 0, 208, 186, 246,
	0, 188, 207, 154, 236, 199, 245, 255, 256, 233,
	253, 260, 223, 98, 232, 244, 114, 218, 0, 0,
	0, 100, 242, 229, 165, 144, 145, 99, 0, 204,
	122, 130, 119, 178, 239, 240, 118, 263, 106, 252,
	102, 107, 251, 172, 235, 243, 166, 159, 101, 241,
	164, 158, 149, 126, 137, 196, 156, 197, 138, 169,
	168, 170, 0, 0, 0, 227, 249, 264, 111, 0,
	0, 234, 258, 259, 0, 200, 112, 131, 125, 195,
	129, 171, 108, 140, 224, 148, 155, 203, 262, 185,
	209, 115, 248, 225, 372, 383, 378, 379, 376, 377,
	375, 374, 373, 386, 364, 365, 366, 367, 369, 0,
	380, 381, 368, 94, 103, 152, 261, 201, 128, 250,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 104, 110, 116,
	120, 124, 127, 133, 136, 139, 141, 142, 143, 146,
	157, 160, 161, 162, 163, 173, 174, 175, 177, 180,
	181, 182, 183, 184, 187, 189, 190, 191, 192, 193,
	194, 202, 205, 211, 212, 213, 214, 215, 216, 217,
	219, 220, 221, 222, 228, 231, 237, 238, 247, 254,
	257, 179, 0, 0, 0, 0, 328, 0, 0, 0,
	123, 0, 327, 0, 0, 0, 151, 0, 0, 371,
	153, 0, 0, 226, 167, 0, 0, 0, 0, 0,
	362, 363, 0, 0, 0, 0, 0, 0, 0, 0,
	57, 0, 0, 91, 92, 93, 349, 944, 351, 352,
	353, 354, 0, 0, 113, 350, 355, 356, 357, 0,
	0, 0, 0, 325, 342, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 339, 340, 411, 0,
	0, 0, 385, 0, 341, 0, 0, 334, 335, 337,
	336, 338, 343, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 384, 0, 0, 282, 0, 0, 382,
	0, 198, 0, 230, 135, 150, 109, 147, 95, 105,
	0, 134, 176, 206, 210, 0, 0, 0, 117, 0,
	208, 186, 246, 0, 188, 207, 154, 236, 199, 245,
	255, 256, 233, 253, 260, 223, 98, 232, 244, 114,
	218, 0, 0, 0, 100, 242, 229, 165, 144, 145,
	99, 0, 204, 122, 130, 119, 178, 239, 240, 118,
	263, 106, 252, 102, 107, 251, 172, 235, 243, 166,
	159, 101, 241, 164, 158, 149, 126, 137, 196, 156,
	197, 138, 169, 168, 170, 0, 0, 0, 227, 249,
	264, 111, 0, 0, 234, 258, 259, 0, 200, 112,
	131, 125, 195, 129, 171, 108, 140, 224, 148, 155,
	203, 262, 185, 209, 115, 248, 225, 372, 383, 378,
	379, 376, 377, 375, 374, 373, 386, 364, 365, 366,
	367, 369, 0, 380, 381, 368, 94, 103, 152, 261,
	201, 128, 250, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 136, 139, 141,
	142, 143, 146, 157, 160, 161, 162, 163, 173, 174,
	175, 177, 180, 181, 182, 183, 184, 187, 189, 190,
	191, 192, 193, 194, 202, 205, 211, 212, 213, 214,
	215, 216, 217, 219, 220, 221, 222, 228, 231, 237,
	238, 247, 254, 257, 179, 0, 0, 0, 0, 328,
	0, 0, 0, 123, 0, 327, 0, 0, 0, 151,
	0, 0, 371, 153, 0, 0, 226, 167, 0, 0,
	0, 0, 0, 362, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 0, 0, 91, 92, 93, 349,
	941, 351, 352, 353, 354, 0, 0, 113, 350, 355,
	356, 357, 0, 0, 0, 0, 325, 342, 0, 370,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	340, 411, 0, 0, 0, 385, 0, 341, 0, 0,
	334, 335, 337, 336, 338, 343, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 384, 0, 0, 282,
	0, 0, 382, 0, 198, 0, 230, 135, 150, 109,
	147, 95, 105, 0, 134, 176, 206, 210, 0, 0,
	0, 117, 0, 208, 186, 246, 0, 188, 207, 154,
	236, 199, 245, 255, 256, 233, 253, 260, 223, 98,
	232, 244, 114, 218, 0, 0, 0, 100, 242, 229,
	165, 144, 145, 99, 0, 204, 122, 130, 119, 178,
	239, 240, 118, 263, 106, 252, 102, 107, 251, 172,
	235, 243, 166, 159, 101, 241, 164, 158, 149, 126,
	137, 196, 156, 197, 138, 169, 168, 170, 0, 0,
	0, 227, 249, 264, 111, 0, 0, 234, 258, 259,
	0, 200, 112, 131, 125, 195, 129, 171, 108, 140,
	224, 148, 155, 203, 262, 185, 209, 115, 248, 225,
	372, 383, 378, 379, 376, 377, 375, 374, 373, 386,
	364, 365, 366, 367, 369, 0, 380, 381, 368, 94,
	103, 152, 261, 201, 128, 250, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 97, 104, 110, 116, 120, 124, 127, 133,
	136, 139, 141, 142, 143, 146, 157, 160, 161, 162,
	163, 173, 174, 175, 177, 180, 181, 182, 183, 184,
	187, 189, 190, 191, 192, 193, 194, 202, 205, 211,
	212, 213, 214, 215, 216, 217, 219, 220, 221, 222,
	228, 231, 237, 238, 247, 254, 257, 392, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	0, 0, 0, 0, 328, 0, 0, 0, 123, 0,
	327, 0, 0, 0, 151, 0, 0, 371, 153, 0,
	0, 226, 167, 0, 0, 0, 0, 0, 362, 363,
	0, 0, 0, 0, 0, 0, 0, 0, 57, 0,
	0, 91, 92, 93, 349, 348, 351, 352, 353, 354,
	0, 0, 113, 350, 355, 356, 357, 0, 0, 0,
	0, 325, 342, 0, 370, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 340, 0, 0, 0, 0,
	385, 0, 341, 0, 0, 334, 335, 337, 336, 338,
	343, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 384, 0, 0, 282, 0, 0, 382, 0, 198,
	0, 230, 135, 150, 109, 147, 95, 105, 0, 134,
	176, 206, 210, 0, 0, 0, 117, 0, 208, 186,
	246, 0, 188, 207, 154, 236, 199, 245, 255, 256,
	233, 253, 260, 223, 98, 232, 244, 114, 218, 0,
	0, 0, 100, 242, 229, 165, 144, 145, 99, 0,
	204, 122, 130, 119, 178, 239, 240, 118, 263, 106,
	252, 102, 107, 251, 172, 235, 243, 166, 159, 101,
	241, 164, 158, 149, 126, 137, 196, 156, 197, 138,
	169, 168, 170, 0, 0, 0, 227, 249, 264, 111,
	0, 0, 234, 258, 259, 0, 200, 112, 131, 125,
	195, 129, 171, 108, 140, 224, 148, 155, 203, 262,
	185, 209, 115, 248, 225, 372, 383, 378, 379, 376,
	377, 375, 374, 373, 386, 364, 365, 366, 367, 369,
	0, 380, 381, 368, 94, 103, 152, 261, 201, 128,
	250, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 97, 104, 110,
	116, 120, 124, 127, 133, 136, 139, 141, 142, 143,
	146, 157, 160, 161, 162, 163, 173, 174, 175, 177,
	180, 181, 182, 183, 184, 187, 189, 190, 191, 192,
	193, 194, 202, 205, 211, 212, 213, 214, 215, 216,
	217, 219, 220, 221, 222, 228, 231, 237, 238, 247,
	254, 257, 179, 0, 0, 0, 0, 328, 0, 0,
	0, 123, 0, 327, 0, 0, 0, 151, 0, 0,
	371, 153, 0, 0, 226, 167, 0, 0, 0, 0,
	0, 362, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 57, 0, 0, 91, 92, 93, 349, 348, 351,
	352, 353, 354, 0, 0, 113, 350, 355, 356, 357,
	0, 0, 0, 0, 325, 342, 0, 370, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 340, 0,
	0, 0, 0, 385, 0, 341, 0, 0, 334, 335,
	337, 336, 338, 343, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 384, 0, 0, 282, 0, 0,
	382, 0, 198, 0, 230, 135, 150, 109, 147, 95,
	105, 0, 134, 176, 206, 210, 0, 0, 0, 117,
	0, 208, 186, 246, 0, 188, 207, 154, 236, 199,
	245, 255, 256, 233, 253, 260, 223, 98, 232, 244,
	114, 218, 0, 0, 0, 100, 242, 229, 165, 144,
	145, 99, 0, 204, 122, 130, 119, 178, 239, 240,
	118, 263, 106, 252, 102, 107, 251, 172, 235, 243,
	166, 159, 101, 241, 164, 158, 149, 126, 137, 196,
	156, 197, 138, 169, 168, 170, 0, 0, 0, 227,
	249, 264, 111, 0, 0, 234, 258, 259, 0, 200,
	112, 131, 125, 195, 129, 171, 108, 140, 224, 148,
	155, 203, 262, 185, 209, 115, 248, 225, 372, 383,
	378, 379, 376, 377, 375, 374, 373, 386, 364, 365,
	366, 367, 369, 0, 380, 381, 368, 94, 103, 152,
	261, 201, 128, 250, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	97, 104, 110, 116, 120, 124, 127, 133, 136, 139,
	141, 142, 143, 146, 157, 160, 161, 162, 163, 173,
	174, 175, 177, 180, 181, 182, 183, 184, 187, 189,
	190, 191, 192, 193, 194, 202, 205, 211, 212, 213,
	214, 215, 216, 217, 219, 220, 221, 222, 228, 231,
	237, 238, 247, 254, 257, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 0,
	151, 0, 0, 371, 153, 0, 0, 226, 167, 0,
	0, 0, 0, 0, 362, 363, 0, 0, 0, 0,
	0, 0, 0, 0, 57, 0, 0, 91, 92, 93,
	349, 348, 351, 352, 353, 354, 0, 0, 113, 350,
	355, 356, 357, 0, 0, 0, 0, 0, 342, 0,
	370, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	339, 340, 0, 0, 0, 0, 385, 0, 341, 0,
	0, 334, 335, 337, 336, 338, 343, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 384, 0, 0,
	282, 0, 0, 382, 0, 198, 0, 230, 135, 150,
	109, 147, 95, 105, 0, 134, 176, 206, 210, 0,
	0, 0, 117, 0, 208, 186, 246, 1597, 188, 207,
	154, 236, 199, 245, 255, 256, 233, 253, 260, 223,
	98, 232, 244, 114, 218, 0, 0, 0, 100, 242,
	229, 165, 144, 145, 99, 0, 204, 122, 130, 119,
	178, 239, 240, 118, 263, 106, 252, 102, 107, 251,
	172, 235, 243, 166, 159, 101, 241, 164, 158, 149,
	126, 137, 196, 156, 197, 138, 169, 168, 170, 0,
	0, 0, 227, 249, 264, 111, 0, 0, 234, 258,
	259, 0, 200, 112, 131, 125, 195, 129, 171, 108,
	140, 224, 148, 155, 203, 262, 185, 209, 115, 248,
	225, 372, 383, 378, 379, 376, 377, 375, 374, 373,
	386, 364, 365, 366, 367, 369, 0, 380, 381, 368,
	94, 103, 152, 261, 201, 128, 250, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 104, 110, 116, 120, 124, 127,
	133, 136, 139, 141, 142, 143, 146, 157, 160, 161,
	162, 163, 173, 174, 175, 177, 180, 181, 182, 183,
	184, 187, 189, 190, 191, 192, 193, 194, 202, 205,
	211, 212, 213, 214, 215, 216, 217, 219, 220, 221,
	222, 228, 231, 237, 238, 247, 254, 257, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 0, 151, 0, 0, 371, 153, 0, 0,
	226, 167, 0, 0, 0, 0, 0, 362, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 57, 0, 399,
	91, 92, 93, 349, 348, 351, 352, 353, 354, 0,
	0, 113, 350, 355, 356, 357, 0, 0, 0, 0,
	0, 342, 0, 370, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 340, 0, 0, 0, 0, 385,
	0, 341, 0, 0, 334, 335, 337, 336, 338, 343,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	384, 0, 0, 282, 0, 0, 382, 0, 198, 0,
	230, 135, 150, 109, 147, 95, 105, 0, 134, 176,
	206, 210, 0, 0, 0, 117, 0, 208, 186, 246,
	0, 188, 207, 154, 236, 199, 245, 255, 256, 233,
	253, 260, 223, 98, 232, 244, 114, 218, 0, 0,
	0, 100, 242, 229, 165, 144, 145, 99, 0, 204,
	122, 130, 119, 178, 239, 240, 118, 263, 106, 252,
	102, 107, 251, 172, 235, 243, 166, 159, 101, 241,
	164, 158, 149, 126, 137, 196, 156, 197, 138, 169,
	168, 170, 0, 0, 0, 227, 249, 264, 111, 0,
	0, 234, 258, 259, 0, 200, 112, 131, 125, 195,
	129, 171, 108, 140, 224, 148, 155, 203, 262, 185,
	209, 115, 248, 225, 372, 383, 378, 379, 376, 377,
	375, 374, 373, 386, 364, 365, 366, 367, 369, 0,
	380, 381, 368, 94, 103, 152, 261, 201, 128, 250,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 104, 110, 116,
	120, 124, 127, 133, 136, 139, 141, 142, 143, 146,
	157, 160, 161, 162, 163, 173, 174, 175, 177, 180,
	181, 182, 183, 184, 187, 189, 190, 191, 192, 193,
	194, 202, 205, 211, 212, 213, 214, 215, 216, 217,
	219, 220, 221, 222, 228, 231, 237, 238, 247, 254,
	257, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 0, 151, 0, 0, 371,
	153, 0, 0, 226, 167, 0, 0, 0, 0, 0,
	362, 363, 0, 0, 0, 0, 0, 0, 0, 0,
	57, 0, 0, 91, 92, 93, 349, 348, 351, 352,
	353, 354, 0, 0, 113, 350, 355, 356, 357, 0,
	0, 0, 0, 0, 342, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 339, 340, 0, 0,
	0, 0, 385, 0, 341, 0, 0, 334, 335, 337,
	336, 338, 343, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 384, 0, 0, 282, 0, 0, 382,
	0, 198, 0, 230, 135, 150, 109, 147, 95, 105,
	0, 134, 176, 206, 210, 0, 0, 0, 117, 0,
	208, 186, 246, 0, 188, 207, 154, 236, 199, 245,
	255, 256, 233, 253, 260, 223, 98, 232, 244, 114,
	218, 0, 0, 0, 100, 242, 229, 165, 144, 145,
	99, 0, 204, 122, 130, 119, 178, 239, 240, 118,
	263, 106, 252, 102, 107, 251, 172, 235, 243, 166,
	159, 101, 241, 164, 158, 149, 126, 137, 196, 156,
	197, 138, 169, 168, 170, 0, 0, 0, 227, 249,
	264, 111, 0, 0, 234, 258, 259, 0, 200, 112,
	131, 125, 195, 129, 171, 108, 140, 224, 148, 155,
	203, 262, 185, 209, 115, 248, 225, 372, 383, 378,
	379, 376, 377, 375, 374, 373, 386, 364, 365, 366,
	367, 369, 0, 380, 381, 368, 94, 103, 152, 261,
	201, 128, 250, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 136, 139, 141,
	142, 143, 146, 157, 160, 161, 162, 163, 173, 174,
	175, 177, 180, 181, 182, 183, 184, 187, 189, 190,
	191, 192, 193, 194, 202, 205, 211, 212, 213, 214,
	215, 216, 217, 219, 220, 221, 222, 228, 231, 237,
	238, 247, 254, 257, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 0, 151,
	0, 0, 0, 153, 0, 0, 226, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 644, 643, 653, 654, 646,
	647, 648, 649, 650, 651, 652, 645, 0, 0, 655,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 282,
	0, 0, 0, 0, 198, 0, 230, 135, 150, 109,
	147, 95, 105, 0, 134, 176, 206, 210, 0, 0,
	0, 117, 0, 208, 186, 246, 0, 188, 207, 154,
	236, 199, 245, 255, 256, 233, 253, 260, 223, 98,
	232, 244, 114, 218, 0, 0, 0, 100, 242, 229,
	165, 144, 145, 99, 0, 204, 122, 130, 119, 178,
	239, 240, 118, 263, 106, 252, 102, 107, 251, 172,
	235, 243, 166, 159, 101, 241, 164, 158, 149, 126,
	137, 196, 156, 197, 138, 169, 168, 170, 0, 0,
	0, 227, 249, 264, 111, 0, 0, 234, 258, 259,
	0, 200, 112, 131, 125, 195, 129, 171, 108, 140,
	224, 148, 155, 203, 262, 185, 209, 115, 248, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	103, 152, 261, 201, 128, 250, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 97, 104, 110, 116, 120, 124, 127, 133,
	136, 139, 141, 142, 143, 146, 157, 160, 161, 162,
	163, 173, 174, 175, 177, 180, 181, 182, 183, 184,
	187, 189, 190, 191, 192, 193, 194, 202, 205, 211,
	212, 213, 214, 215, 216, 217, 219, 220, 221, 222,
	228, 231, 237, 238, 247, 254, 257, 179, 0, 0,
	0, 739, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 0, 151, 0, 0, 0, 153, 0, 0, 226,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 0, 741, 0, 0, 0, 0, 0, 0,
	113, 0, 0, 0, 0, 0, 633, 634, 632, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 635, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
	0, 0, 282, 0, 0, 0, 0, 198, 0, 230,
	135, 150, 109, 147, 95, 105, 0, 134, 176, 206,
	210, 0, 0, 0, 117, 0, 208, 186, 246, 0,
	188, 207, 154, 236, 199, 245, 255, 256, 233, 253,
	260, 223, 98, 232, 244, 114, 218, 0, 0, 0,
	100, 242, 229, 165, 144, 145, 99, 0, 204, 122,
	130, 119, 178, 239, 240, 118, 263, 106, 252, 102,
	107, 251, 172, 235, 243, 166, 159, 101, 241, 164,
	158, 149, 126, 137, 196, 156, 197, 138, 169, 168,
	170, 0, 0, 0, 227, 249, 264, 111, 0, 0,
	234, 258, 259, 0, 200, 112, 131, 125, 195, 129,
	171, 108, 140, 224, 148, 155, 203, 262, 185, 209,
	115, 248, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 103, 152, 261, 201, 128, 250, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 97, 104, 110, 116, 120,
	124, 127, 133, 136, 139, 141, 142, 143, 146, 157,
	160, 161, 162, 163, 173, 174, 175, 177, 180, 181,
	182, 183, 184, 187, 189, 190, 191, 192, 193, 194,
	202, 205, 211, 212, 213, 214, 215, 216, 217, 219,
	220, 221, 222, 228, 231, 237, 238, 247, 254, 257,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 0, 151, 0, 0, 0, 153,
	0, 0, 226, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 0, 0, 83,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 85, 86, 0, 82, 0, 0, 0, 87,
	198, 0, 230, 135, 150, 109, 147, 95, 105, 0,
	134, 176, 206, 210, 0, 0, 0, 117, 0, 208,
	186, 246, 0, 188, 207, 154, 236, 199, 245, 255,
	256, 233, 253, 260, 223, 98, 232, 244, 114, 218,
	0, 0, 0, 100, 242, 229, 165, 144, 145, 99,
	0, 204, 122, 130, 119, 178, 239, 240, 118, 263,
	106, 252, 102, 107, 251, 172, 235, 243, 166, 159,
	101, 241, 164, 158, 149, 126, 137, 196, 156, 197,
	138, 169, 168, 170, 0, 0, 0, 227, 249, 264,
	111, 0, 0, 234, 258, 259, 0, 200, 112, 131,
	125, 195, 129, 171, 108, 140, 224, 148, 155, 203,
	262, 185, 209, 115, 248, 225, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 103, 152, 261, 201,
	128, 250, 0, 0, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 97, 104,
	110, 116, 120, 124, 127, 133, 136, 139, 141, 142,
	143, 146, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 202, 205, 211, 212, 213, 214, 215,
	216, 217, 219, 220, 221, 222, 228, 231, 237, 238,
	247, 254, 257, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 0, 151, 0,
	0, 0, 153, 0, 0, 226, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 316, 0, 132, 0, 0, 0, 282, 0,
	0, 0, 0, 198, 0, 230, 135, 150, 109, 147,
	95, 105, 0, 134, 176, 206, 210, 0, 0, 0,
	117, 0, 208, 186, 246, 0, 188, 207, 154, 236,
	199, 245, 255, 256, 233, 253, 260, 223, 98, 232,
	244, 114, 218, 0, 0, 0, 100, 242, 229, 165,
	144, 145, 99, 0, 204, 122, 130, 119, 178, 239,
	240, 118, 263, 106, 252, 102, 107, 251, 172, 235,
	243, 166, 159, 101, 241, 164, 158, 149, 126, 137,
	196, 156, 197, 138, 169, 168, 170, 0, 0, 0,
	227, 249, 264, 111, 0, 0, 234, 258, 259, 0,
	200, 112, 131, 125, 195, 129, 171, 108, 140, 224,
	148, 155, 203, 262, 185, 209, 115, 248, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 103,
	152, 261, 201, 128, 250, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 97, 104, 110, 116, 120, 124, 127, 133, 136,
	139, 141, 142, 143, 146, 157, 160, 161, 162, 163,
	173, 174, 175, 177, 180, 181, 182, 183, 184, 187,
	189, 190, 191, 192, 193, 194, 202, 205, 211, 212,
	213, 214, 215, 216, 217, 219, 220, 221, 222, 228,
	231, 237, 238, 247, 254, 257, 315, 179, 0, 0,
	0, 1012, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 0, 151, 0, 0, 0, 153, 0, 0, 226,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 0, 1014, 0, 0, 0, 0, 0, 0,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
	0, 0, 282, 0, 0, 0, 0, 198, 0, 230,
	135, 150, 109, 147, 95, 105, 0, 134, 176, 206,
	210, 0, 0, 0, 117, 0, 208, 186, 246, 0,
	188, 207, 154, 236, 199, 245, 255, 256, 233, 253,
	260, 223, 98, 232, 244, 114, 218, 0, 0, 0,
	100, 242, 229, 165, 144, 145, 99, 0, 204, 122,
	130, 119, 178, 239, 240, 118, 263, 106, 252, 102,
	107, 251, 172, 235, 243, 166, 159, 101, 241, 164,
	158, 149, 126, 137, 196, 156, 197, 138, 169, 168,
	170, 0, 0, 0, 227, 249, 264, 111, 0, 0,
	234, 258, 259, 0, 200, 112, 131, 125, 195, 129,
	171, 108, 140, 224, 148, 155, 203, 262, 185, 209,
	115, 248, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 103, 152, 261, 201, 128, 250, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 97, 104, 110, 116, 120,
	124, 127, 133, 136, 139, 141, 142, 143, 146, 157,
	160, 161, 162, 163, 173, 174, 175, 177, 180, 181,
	182, 183, 184, 187, 189, 190, 191, 192, 193, 194,
	202, 205, 211, 212, 213, 214, 215, 216, 217, 219,
	220, 221, 222, 228, 231, 237, 238, 247, 254, 257,
	29, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 0, 151, 0, 0,
	0, 153, 0, 0, 226, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 57, 0, 0, 91, 92, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 0, 0, 282, 0, 0,
	0, 0, 198, 0, 230, 135, 150, 109, 147, 95,
	105, 0, 134, 176, 206, 210, 0, 0, 0, 117,
	0, 208, 186, 246, 0, 188, 207, 154, 236, 199,
	245, 255, 256, 233, 253, 260, 223, 98, 232, 244,
	114, 218, 0, 0, 0, 100, 242, 229, 165, 144,
	145, 99, 0, 204, 122, 130, 119, 178, 239, 240,
	118, 263, 106, 252, 102, 107, 251, 172, 235, 243,
	166, 159, 101, 241, 164, 158, 149, 126, 137, 196,
	156, 197, 138, 169, 168, 170, 0, 0, 0, 227,
	249, 264, 111, 0, 0, 234, 258, 259, 0, 200,
	112, 131, 125, 195, 129, 171, 108, 140, 224, 148,
	155, 203, 262, 185, 209, 115, 248, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 103, 152,
	261, 201, 128, 250, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	97, 104, 110, 116, 120, 124, 127, 133, 136, 139,
	141, 142, 143, 146, 157, 160, 161, 162, 163, 173,
	174, 175, 177, 180, 181, 182, 183, 184, 187, 189,
	190, 191, 192, 193, 194, 202, 205, 211, 212, 213,
	214, 215, 216, 217, 219, 220, 221, 222, 228, 231,
	237, 238, 247, 254, 257, 179, 0, 0, 0, 1012,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 0,
	151, 0, 0, 0, 153, 0, 0, 226, 167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	0, 1014, 0, 0, 0, 0, 0, 0, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 0, 0, 0,
	282, 0, 0, 0, 0, 198, 0, 230, 135, 150,
	109, 147, 95, 105, 0, 134, 176, 206, 210, 0,
	0, 0, 117, 0, 208, 186, 246, 0, 1010, 207,
	154, 236, 199, 245, 255, 256, 233, 253, 260, 223,
	98, 232, 244, 114, 218, 0, 0, 0, 100, 242,
	229, 165, 144, 145, 99, 0, 204, 122, 130, 119,
	178, 239, 240, 118, 263, 106, 252, 102, 107, 251,
	172, 235, 243, 166, 159, 101, 241, 164, 158, 149,
	126, 137, 196, 156, 197, 138, 169, 168, 170, 0,
	0, 0, 227, 249, 264, 111, 0, 0, 234, 258,
	259, 0, 200, 112, 131, 125, 195, 129, 171, 108,
	140, 224, 148, 155, 203, 262, 185, 209, 115, 248,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 103, 152, 261, 201, 128, 250, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 104, 110, 116, 120, 124, 127,
	133, 136, 139, 141, 142, 143, 146, 157, 160, 161,
	162, 163, 173, 174, 175, 177, 180, 181, 182, 183,
	184, 187, 189, 190, 191, 192, 193, 194, 202, 205,
	211, 212, 213, 214, 215, 216, 217, 219, 220, 221,
	222, 228, 231, 237, 238, 247, 254, 257, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 0, 151, 0, 0, 0, 153, 0, 0,
	226, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 0, 0, 978, 0, 0, 979, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 0, 0, 282, 0, 0, 0, 0, 198, 0,
	230, 135, 150, 109, 147, 95, 105, 0, 134, 176,
	206, 210, 0, 0, 0, 117, 0, 208, 186, 246,
	0, 188, 207, 154, 236, 199, 245, 255, 256, 233,
	253, 260, 223, 98, 232, 244, 114, 218, 0, 0,
	0, 100, 242, 229, 165, 144, 145, 99, 0, 204,
	122, 130, 119, 178, 239, 240, 118, 263, 106, 252,
	102, 107, 251, 172, 235, 243, 166, 159, 101, 241,
	164, 158, 149, 126, 137, 196, 156, 197, 138, 169,
	168, 170, 0, 0, 0, 227, 249, 264, 111, 0,
	0, 234, 258, 259, 0, 200, 112, 131, 125, 195,
	129, 171, 108, 140, 224, 148, 155, 203, 262, 185,
	209, 115, 248, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 103, 152, 261, 201, 128, 250,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 104, 110, 116,
	120, 124, 127, 133, 136, 139, 141, 142, 143, 146,
	157, 160, 161, 162, 163, 173, 174, 175, 177, 180,
	181, 182, 183, 184, 187, 189, 190, 191, 192, 193,
	194, 202, 205, 211, 212, 213, 214, 215, 216, 217,
	219, 220, 221, 222, 228, 231, 237, 238, 247, 254,
	257, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 774, 0, 0, 0, 151, 0, 0, 0,
	153, 0, 0, 226, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 93, 0, 773, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 0, 0, 282, 0, 0, 0,
	0, 198, 0, 230, 135, 150, 109, 147, 95, 105,
	0, 134, 176, 206, 210, 0, 0, 0, 117, 0,
	208, 186, 246, 0, 188, 207, 154, 236, 199, 245,
	255, 256, 233, 253, 260, 223, 98, 232, 244, 114,
	218, 0, 0, 0, 100, 242, 229, 165, 144, 145,
	99, 0, 204, 122, 130, 119, 178, 239, 240, 118,
	263, 106, 252, 102, 107, 251, 172, 235, 243, 166,
	159, 101, 241, 164, 158, 149, 126, 137, 196, 156,
	197, 138, 169, 168, 170, 0, 0, 0, 227, 249,
	264, 111, 0, 0, 234, 258, 259, 0, 200, 112,
	131, 125, 195, 129, 171, 108, 140, 224, 148, 155,
	203, 262, 185, 209, 115, 248, 225, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 103, 152, 261,
	201, 128, 250, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 136, 139, 141,
	142, 143, 146, 157, 160, 161, 162, 163, 173, 174,
	175, 177, 180, 181, 182, 183, 184, 187, 189, 190,
	191, 192, 193, 194, 202, 205, 211, 212, 213, 214,
	215, 216, 217, 219, 220, 221, 222, 228, 231, 237,
	238, 247, 254, 257, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 0, 151,
	0, 0, 0, 153, 0, 0, 226, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 399, 91, 92, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 282,
	0, 0, 0, 0, 198, 0, 230, 135, 150, 109,
	147, 95, 105, 0, 134, 176, 206, 210, 0, 0,
	0, 117, 0, 208, 186, 246, 0, 188, 207, 154,
	236, 199, 245, 255, 256, 233, 253, 260, 223, 98,
	232, 244, 114, 218, 0, 0, 0, 100, 242, 229,
	165, 144, 145, 99, 0, 204, 122, 130, 119, 178,
	239, 240, 118, 263, 106, 252, 102, 107, 251, 172,
	235, 243, 166, 159, 101, 241, 164, 158, 149, 126,
	137, 196, 156, 197, 138, 169, 168, 170, 0, 0,
	0, 227, 249, 264, 111, 0, 0, 234, 258, 259,
	0, 200, 112, 131, 125, 195, 129, 171, 108, 140,
	224, 148, 155, 203, 262, 185, 209, 115, 248, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	103, 152, 261, 201, 128, 250, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 97, 104, 110, 116, 120, 124, 127, 133,
	136, 139, 141, 142, 143, 146, 157, 160, 161, 162,
	163, 173, 174, 175, 177, 180, 181, 182, 183, 184,
	187, 189, 190, 191, 192, 193, 194, 202, 205, 211,
	212, 213, 214, 215, 216, 217, 219, 220, 221, 222,
	228, 231, 237, 238, 247, 254, 257, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 0, 151, 0, 0, 0, 153, 0, 0, 226,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 57, 0, 0, 91,
	92, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
	0, 0, 282, 0, 0, 0, 0, 198, 0, 230,
	135, 150, 109, 147, 95, 105, 0, 134, 176, 206,
	210, 0, 0, 0, 117, 0, 208, 186, 246, 0,
	188, 207, 154, 236, 199, 245, 255, 256, 233, 253,
	260, 223, 98, 232, 244, 114, 218, 0, 0, 0,
	100, 242, 229, 165, 144, 145, 99, 0, 204, 122,
	130, 119, 178, 239, 240, 118, 263, 106, 252, 102,
	107, 251, 172, 235, 243, 166, 159, 101, 241, 164,
	158, 149, 126, 137, 196, 156, 197, 138, 169, 168,
	170, 0, 0, 0, 227, 249, 264, 111, 0, 0,
	234, 258, 259, 0, 200, 112, 131, 125, 195, 129,
	171, 108, 140, 224, 148, 155, 203, 262, 185, 209,
	115, 248, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 103, 152, 261, 201, 128, 250, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 97, 104, 110, 116, 120,
	124, 127, 133, 136, 139, 141, 142, 143, 146, 157,
	160, 161, 162, 163, 173, 174, 175, 177, 180, 181,
	182, 183, 184, 187, 189, 190, 191, 192, 193, 194,
	202, 205, 211, 212, 213, 214, 215, 216, 217, 219,
	220, 221, 222, 228, 231, 237, 238, 247, 254, 257,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 0, 151, 0, 0, 0, 153,
	0, 0, 226, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 0, 1014, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 0, 0, 0, 282, 0, 0, 0, 0,
	198, 0, 230, 135, 150, 109, 147, 95, 105, 0,
	134, 176, 206, 210, 0, 0, 0, 117, 0, 208,
	186, 246, 0, 188, 207, 154, 236, 199, 245, 255,
	256, 233, 253, 260, 223, 98, 232, 244, 114, 218,
	0, 0, 0, 100, 242, 229, 165, 144, 145, 99,
	0, 204, 122, 130, 119, 178, 239, 240, 118, 263,
	106, 252, 102, 107, 251, 172, 235, 243, 166, 159,
	101, 241, 164, 158, 149, 126, 137, 196, 156, 197,
	138, 169, 168, 170, 0, 0, 0, 227, 249, 264,
	111, 0, 0, 234, 258, 259, 0, 200, 112, 131,
	125, 195, 129, 171, 108, 140, 224, 148, 155, 203,
	262, 185, 209, 115, 248, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 103, 152, 261, 201,
	128, 250, 0, 0, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 97, 104,
	110, 116, 120, 124, 127, 133, 136, 139, 141, 142,
	143, 146, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 202, 205, 211, 212, 213, 214, 215,
	216, 217, 219, 220, 221, 222, 228, 231, 237, 238,
	247, 254, 257, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 0, 151, 0,
	0, 0, 153, 0, 0, 226, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 0, 741,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 282, 0,
	0, 0, 0, 198, 0, 230, 135, 150, 109, 147,
	95, 105, 0, 134, 176, 206, 210, 0, 0, 0,
	117, 0, 208, 186, 246, 0, 188, 207, 154, 236,
	199, 245, 255, 256, 233, 253, 260, 223, 98, 232,
	244, 114, 218, 0, 0, 0, 100, 242, 229, 165,
	144, 145, 99, 0, 204, 122, 130, 119, 178, 239,
	240, 118, 263, 106, 252, 102, 107, 251, 172, 235,
	243, 166, 159, 101, 241, 164, 158, 149, 126, 137,
	196, 156, 197, 138, 169, 168, 170, 0, 0, 0,
	227, 249, 264, 111, 0, 0, 234, 258, 259, 0,
	200, 112, 131, 125, 195, 129, 171, 108, 140, 224,
	148, 155, 203, 262, 185, 209, 115, 248, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 103,
	152, 261, 201, 128, 250, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 97, 104, 110, 116, 120, 124, 127, 133, 136,
	139, 141, 142, 143, 146, 157, 160, 161, 162, 163,
	173, 174, 175, 177, 180, 181, 182, 183, 184, 187,
	189, 190, 191, 192, 193, 194, 202, 205, 211, 212,
	213, 214, 215, 216, 217, 219, 220, 221, 222, 228,
	231, 237, 238, 247, 254, 257, 179, 0, 0, 0,
	0, 0, 0, 0, 744, 123, 0, 0, 0, 0,
	0, 151, 0, 0, 0, 153, 0, 0, 226, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 282, 0, 0, 0, 0, 198, 0, 230, 135,
	150, 109, 147, 95, 105, 0, 134, 176, 206, 210,
	0, 0, 0, 117, 0, 208, 186, 246, 0, 188,
	207, 154, 236, 199, 245, 255, 256, 233, 253, 260,
	223, 98, 232, 244, 114, 218, 0, 0, 0, 100,
	242, 229, 165, 144, 145, 99, 0, 204, 122, 130,
	119, 178, 239, 240, 118, 263, 106, 252, 102, 107,
	251, 172, 235, 243, 166, 159, 101, 241, 164, 158,
	149, 126, 137, 196, 156, 197, 138, 169, 168, 170,
	0, 0, 0, 227, 249, 264, 111, 0, 0, 234,
	258, 259, 0, 200, 112, 131, 125, 195, 129, 171,
	108, 140, 224, 148, 155, 203, 262, 185, 209, 115,
	248, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 103, 152, 261, 201, 128, 250, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 97, 104, 110, 116, 120, 124,
	127, 133, 136, 139, 141, 142, 143, 146, 157, 160,
	161, 162, 163, 173, 174, 175, 177, 180, 181, 182,
	183, 184, 187, 189, 190, 191, 192, 193, 194, 202,
	205, 211, 212, 213, 214, 215, 216, 217, 219, 220,
	221, 222, 228, 231, 237, 238, 247, 254, 257, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 0, 151, 0, 0, 0, 153, 0,
	0, 226, 167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 0, 622, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 0, 0, 282, 0, 0, 0, 0, 198,
	0, 230, 135, 150, 109, 147, 95, 105, 0, 134,
	176, 206, 210, 0, 0, 0, 117, 0, 208, 186,
	246, 0, 188, 207, 154, 236, 199, 245, 255, 256,
	233, 253, 260, 223, 98, 232, 244, 114, 218, 0,
	0, 0, 100, 242, 229, 165, 144, 145, 99, 0,
	204, 122, 130, 119, 178, 239, 240, 118, 263, 106,
	252, 102, 107, 251, 172, 235, 243, 166, 159, 101,
	241, 164, 158, 149, 126, 137, 196, 156, 197, 138,
	169, 168, 170, 0, 0, 0, 227, 249, 264, 111,
	0, 0, 234, 258, 259, 0, 200, 112, 131, 125,
	195, 129, 171, 108, 140, 224, 148, 155, 203, 262,
	185, 209, 115, 248, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 103, 152, 261, 201, 128,
	250, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 97, 104, 110,
	116, 120, 124, 127, 133, 136, 139, 141, 142, 143,
	146, 157, 160, 161, 162, 163, 173, 174, 175, 177,
	180, 181, 182, 183, 184, 187, 189, 190, 191, 192,
	193, 194, 202, 205, 211, 212, 213, 214, 215, 216,
	217, 219, 220, 221, 222, 228, 231, 237, 238, 247,
	254, 257, 416, 0, 0, 0, 0, 0, 0, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 0, 151, 0, 0, 0, 153, 0,
	0, 226, 167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 0, 0, 282, 0, 0, 0, 0, 198,
	0, 230, 135, 150, 109, 147, 95, 105, 0, 134,
	176, 206, 210, 0, 0, 0, 117, 0, 208, 186,
	246, 0, 188, 207, 154, 236, 199, 245, 255, 256,
	233, 253, 260, 223, 98, 232, 244, 114, 218, 0,
	0, 0, 100, 242, 229, 165, 144, 145, 99, 0,
	204, 122, 130, 119, 178, 239, 240, 118, 263, 106,
	252, 102, 107, 251, 172, 235, 243, 166, 159, 101,
	241, 164, 158, 149, 126, 137, 196, 156, 197, 138,
	169, 168, 170, 0, 0, 0, 227, 249, 264, 111,
	0, 0, 234, 258, 259, 0, 200, 112, 131, 125,
	195, 129, 171, 108, 140, 224, 148, 155, 203, 262,
	185, 209, 115, 248, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 103, 152, 261, 201, 128,
	250, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 97, 104, 110,
	116, 120, 124, 127, 133, 136, 139, 141, 142, 143,
	146, 157, 160, 161, 162, 163, 173, 174, 175, 177,
	180, 181, 182, 183, 184, 187, 189, 190, 191, 192,
	193, 194, 202, 205, 211, 212, 213, 214, 215, 216,
	217, 219, 220, 221, 222, 228, 231, 237, 238, 247,
	254, 257, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 0, 151, 0, 0,
	0, 153, 0, 0, 226, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 277, 0, 282, 0, 0,
	0, 0, 198, 0, 230, 135, 150, 109, 147, 95,
	105, 0, 134, 176, 206, 210, 0, 0, 0, 117,
	0, 208, 186, 246, 0, 188, 207, 154, 236, 199,
	245, 255, 256, 233, 253, 260, 223, 98, 232, 244,
	114, 218, 0, 0, 0, 100, 242, 229, 165, 144,
	145, 99, 0, 204, 122, 130, 119, 178, 239, 240,
	118, 263, 106, 252, 102, 107, 251, 172, 235, 243,
	166, 159, 101, 241, 164, 158, 149, 126, 137, 196,
	156, 197, 138, 169, 168, 170, 0, 0, 0, 227,
	249, 264, 111, 0, 0, 234, 258, 259, 0, 200,
	112, 131, 125, 195, 129, 171, 108, 140, 224, 148,
	155, 203, 262, 185, 209, 115, 248, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 103, 152,
	261, 201, 128, 250, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	97, 104, 110, 116, 120, 124, 127, 133, 136, 139,
	141, 142, 143, 146, 157, 160, 161, 162, 163, 173,
	174, 175, 177, 180, 181, 182, 183, 184, 187, 189,
	190, 191, 192, 193, 194, 202, 205, 211, 212, 213,
	214, 215, 216, 217, 219, 220, 221, 222, 228, 231,
	237, 238, 247, 254, 257, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 0,
	151, 0, 0, 0, 153, 0, 0, 226, 167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 0, 0, 0,
	282, 0, 0, 0, 0, 198, 0, 230, 135, 150,
	109, 147, 95, 105, 0, 134, 176, 206, 210, 0,
	0, 0, 117, 0, 208, 186, 246, 0, 188, 207,
	154, 236, 199, 245, 255, 256, 233, 253, 260, 223,
	98, 232, 244, 114, 218, 0, 0, 0, 100, 242,
	229, 165, 144, 145, 99, 0, 204, 122, 130, 119,
	178, 239, 240, 118, 263, 106, 252, 102, 107, 251,
	172, 235, 243, 166, 159, 101, 241, 164, 158, 149,
	126, 137, 196, 156, 197, 138, 169, 168, 170, 0,
	0, 0, 227, 249, 264, 111, 0, 0, 234, 258,
	259, 0, 200, 112, 131, 125, 195, 129, 171, 108,
	140, 224, 148, 155, 203, 262, 185, 209, 115, 248,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 103, 152, 261, 201, 128, 250, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 104, 110, 116, 120, 124, 127,
	133, 136, 139, 141, 142, 143, 146, 157, 160, 161,
	162, 163, 173, 174, 175, 177, 180, 181, 182, 183,
	184, 187, 189, 190, 191, 192, 193, 194, 202, 205,
	211, 212, 213, 214, 215, 216, 217, 219, 220, 221,
	222, 228, 231, 237, 238, 247, 254, 257,
}
var yyPact = [...]int{

	179, -1000, -268, 1082, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1036, 859, -1000,
	-1000, -1000, -1000, -1000, -1000, 294, 12322, -8, 148, -13,
	17144, 145, 1554, 17487, -1000, 24, -1000, 11, 17487, 19,
	12665, -1000, -1000, -77, -88, -1000, 10264, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 821, 1026, 1016, 1023, 673,
	983, -1000, 8880, 115, 115, 16801, 7508, -1000, -1000, 660,
	17487, 143, 17487, -147, 112, 112, 112, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 133, 17487, 674, 674, 310,
	-1000, 17487, 110, 674, 110, 110, 110, 17487, -1000, 202,
	-1000, -1000, -1000, 17487, 674, 976, 370, 132, 370, -1000,
	216, -1000, 5016, 48, 5016, -29, 1045, 30, -16, -1000,
	5016, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 119,
	-1000, -1000, 17487, 16451, 155, 338, -1000, -1000, -1000, -1000,
	-1000, -1000, 630, 401, -1000, 10264, 1590, 687, 687, -1000,
	-1000, 159, -1000, -1000, 11293, 11293, 11293, 11293, 11293, 11293,
	11293, 11293, 11293, 11293, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 687, 195,
	-1000, 9921, 687, 687, 687, 687, 687, 687, 687, 687,
	10264, 687, 687, 687, 687, 687, 687, 687, 687, 687,
	687, 687, 687, 687, 687, 687, 687, -1000, -1000, 1036,
	-1000, 859, -1000, -1000, -1000, 981, 10264, 10264, 1036, -1000,
	947, 8880, -1000, -1000, 935, -1000, -1000, -1000, -1000, 391,
	1063, -1000, 11979, 191, 16108, 15079, 17487, 855, 815, -1000,
	-1000, 190, 800, 7152, -94, -1000, -1000, -1000, 321, 14393,
	-1000, -1000, -1000, 962, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 749, 17487, -1000, 333, -1000, 674,
	5016, 121, 674, 351, 674, 17487, 17487, 5016, 5016, 5016,
	55, 74, 72, 17487, 794, 118, 17487, 1005, 883, 17487,
	674, 674, -1000, 6440, -1000, 5016, 370, -1000, 491, 10264,
	5016, 5016, 5016, 17487, 5016, 5016, -1000, 336, -1000, -1000,
	-1000, -1000, -1000, -1000, 5016, 5016, -1000, 1062, 329, -1000,
	-1000, -1000, -1000, 10264, 248, -1000, 877, -1000, 18, -1000,
	-1000, -1000, -1000, -1000, 1082, -1000, -1000, -1000, -124, -1000,
	-1000, 10264, 10264, 10264, 10264, 484, 293, 11293, 533, 288,
	11293, 11293, 11293, 11293, 11293, 11293, 11293, 11293, 11293, 11293,
	11293, 11293, 11293, 11293, 11293, 647, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 674, -1000, 1080, 796, 796, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 11636, 7851,
	6440, 673, 729, 1036, 8880, 8880, 10264, 10264, 9566, 9223,
	8880, 968, 314, 401, 17487, -1000, -1000, 10950, -1000, -1000,
	-1000, -1000, -1000, 503, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 17487, 17487, 8880, 8880, 8880, 8880, 8880, 1016, 673,
	935, -1000, 1074, 245, 648, 790, -1000, 397, 1016, 14050,
	694, -1000, 935, -1000, -1000, -1000, 17487, -1000, -1000, 15765,
	-1000, -1000, 6084, 82, 17487, -1000, 824, 912, -1000, -1000,
	-1000, 1008, 13364, 13707, 82, 765, 15079, 17487, -1000, -1000,
	15079, 17487, 5728, 6796, -94, -1000, 723, -1000, -123, -110,
	8194, 186, -1000, -1000, -1000, -1000, 4660, 311, 554, 364,
	-64, -1000, -1000, -1000, 833, -1000, 833, 833, 833, 833,
	-18, -18, -18, -18, -1000, -1000, -1000, -1000, -1000, 863,
	862, -1000, 833, 833, 833, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 858, 858, 858, 840, 840, 865, -1000,
	17487, 5016, 1001, 5016, -1000, 95, -1000, -1000, -1000, 17487,
	17487, 17487, 17487, 17487, 158, 17487, 17487, 781, -1000, 17487,
	5016, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 401,
	-1000, -1000, -1000, -1000, -1000, -1000, 17487, -1000, -1000, -1000,
	-1000, 17487, 370, 17487, 17487, 401, -1000, 472, 17487, 17487,
	-1000, -1000, -1000, -1000, -1000, 401, 293, 361, 350, -1000,
	-1000, 535, -1000, -1000, 1605, -1000, -1000, -1000, -1000, 533,
	11293, 11293, 11293, 527, 1605, 1853, 541, 1020, 221, 563,
	563, 217, 217, 217, 217, 217, 396, 396, -1000, -1000,
	-1000, 503, -1000, -1000, -1000, 503, 8880, 8880, 767, 687,
	189, -1000, 821, -1000, -1000, 1016, 716, 716, 520, 582,
	278, 1061, 716, 271, 1050, 716, 716, 8880, -1000, -1000,
	366, -1000, 10264, 503, -1000, 187, -1000, 1000, 759, 746,
	716, 503, 503, 716, 716, 981, -1000, -1000, 944, 10264,
	10264, 10264, -1000, -1000, -1000, 981, 1012, -1000, 952, 951,
	1041, 8880, 15079, 935, -1000, -1000, -1000, 180, 847, 687,
	-1000, 17487, 15079, 15079, 15079, 15079, 15079, -1000, 926, 922,
	-1000, 899, 897, 906, 17487, -1000, 727, 673, 13364, 207,
	687, -1000, 15422, -1000, -1000, 1041, 15079, 626, -1000, 626,
	-1000, 174, -1000, -1000, 723, -94, -52, -1000, -1000, -1000,
	-1000, 401, -1000, 686, 681, 4304, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 857, 674, -1000, 991, 230, 259, 674,
	988, -1000, -1000, -1000, 978, -1000, 380, -67, -1000, -1000,
	429, -18, -18, -1000, -1000, 186, 961, 186, 186, 186,
	457, 457, -1000, -1000, -1000, -1000, 428, -1000, -1000, -1000,
	426, -1000, 876, 17487, 5016, -1000, -1000, -1000, -1000, 264,
	264, 249, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 73, 825, -1000, -1000, -1000, -1000, 14,
	47, 117, -1000, 5016, -1000, 329, 329, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 527, 1605, 1818,
	-1000, 11293, 11293, -1000, -1000, 716, 716, 8880, 6440, 1036,
	981, -1000, -1000, 743, 647, 743, 11293, 11293, -1000, 11293,
	11293, -1000, -159, 734, 319, -1000, 10264, 494, -1000, 6440,
	-1000, 11293, 11293, -1000, -1000, -1000, -1000, -1000, -1000, 933,
	401, 401, -1000, -1000, 17487, -1000, -1000, -1000, -1000, 1039,
	10264, -1000, 652, -1000, 5372, 874, 17487, 687, 1082, 13364,
	17487, 758, -1000, 320, 912, 853, 872, 750, -1000, -1000,
	-1000, -1000, 921, -1000, 907, -1000, -1000, -1000, -1000, -1000,
	673, -1000, 141, 134, 130, 17487, -1000, 1036, 626, -1000,
	-1000, 223, -1000, -1000, -107, -121, -1000, -1000, -1000, 4660,
	-1000, 4660, 17487, 85, -1000, 674, 674, -1000, -1000, -1000,
	846, 870, 11293, -1000, -1000, -1000, 526, 186, 186, -1000,
	318, -1000, -1000, -1000, 709, -1000, 707, 639, 683, 17487,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 17487,
	-1000, -1000, -1000, -1000, -1000, 17487, -165, 674, 17487, 17487,
	17487, 17487, -1000, 370, 370, -1000, 11293, 1605, 1605, -1000,
	-1000, 503, -1000, 1016, -1000, 503, 833, 833, -1000, 833,
	840, -1000, 833, 4, 833, -2, 503, 503, 1766, 1737,
	1701, 1518, 687, -154, -1000, 401, 10264, -1000, 1500, 1243,
	-1000, -1000, 1027, 1019, 401, -1000, -1000, 994, 545, 617,
	-1000, -1000, 8537, 670, 171, 665, -1000, 1036, 17487, 10264,
	-1000, -1000, 10264, 839, -1000, 10264, -1000, -1000, -1000, 1036,
	687, 687, 687, 665, 1016, -1000, -1000, -1000, -1000, 4304,
	-1000, 656, -1000, 833, -1000, -1000, -1000, 17487, -43, 1073,
	1605, -1000, -1000, -1000, -1000, -1000, -18, 448, -18, 425,
	-1000, 400, 5016, -1000, -1000, -1000, -1000, 996, -1000, 6440,
	-1000, -1000, 827, 854, -1000, -1000, -1000, -1000, 1605, -1000,
	981, -1000, -1000, 166, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 11293, 11293, 11293, 11293, 11293, 1016, 446, 401,
	11293, 11293, -1000, 10264, 10264, 987, -1000, 687, -1000, 788,
	17487, 17487, -1000, 17487, 1016, -1000, 401, 401, 17487, 401,
	14736, 17487, 17487, 13009, -1000, 199, 17487, -1000, 644, -1000,
	231, -1000, -112, 186, -1000, 186, 524, 516, -1000, 687,
	636, -1000, 309, 17487, 17487, -1000, -1000, -1000, 1000, 1000,
	1000, 1000, 69, 503, -1000, 1000, 1000, 401, 630, 1068,
	-1000, 687, 1082, 170, -1000, -1000, -1000, 633, 623, -1000,
	623, 623, 207, 199, -1000, 674, 266, 444, -1000, 80,
	17487, 383, 982, -1000, 980, -1000, -1000, -1000, -1000, -1000,
	70, 6440, 4660, 594, -1000, -1000, -1000, -1000, -1000, 503,
	61, -170, -1000, -1000, -1000, 17487, 617, 17487, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 399, -1000, -1000, 17487, -1000,
	-1000, 433, -1000, -1000, 565, -1000, 17487, -1000, -1000, 825,
	-1000, 932, -163, -177, 600, -1000, -1000, 813, -1000, -1000,
	70, 950, -165, -1000, 931, -1000, 17487, -1000, 66, -1000,
	-168, 558, 60, -171, 868, 687, -180, 867, -1000, 1060,
	10607, -1000, -1000, 1066, 215, 215, 1000, 503, -1000, -1000,
	-1000, 90, 412, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1328, 1327, 31, 66, 69, 1326, 1324, 1320, 105,
	104, 99, 1319, 1318, 1317, 1313, 1311, 1309, 1307, 1306,
	1304, 1303, 1302, 1300, 1299, 1298, 1297, 1296, 1295, 1294,
	1287, 1284, 102, 1283, 87, 1282, 1281, 1279, 1278, 1277,
	1276, 1275, 1274, 52, 216, 64, 56, 1273, 58, 84,
	1272, 61, 75, 70, 1269, 33, 1268, 1267, 90, 1266,
	1259, 59, 1257, 1256, 45, 1255, 73, 1254, 13, 42,
	1253, 1252, 1250, 1249, 91, 2223, 1248, 1247, 14, 1245,
	1243, 109, 1240, 62, 46, 15, 18, 20, 1238, 65,
	1235, 6, 1229, 63, 1228, 1227, 1226, 1225, 67, 1224,
	60, 1223, 54, 35, 1222, 10, 78, 30, 23, 8,
	1219, 1218, 19, 74, 55, 72, 1215, 1214, 513, 1211,
	1209, 38, 1205, 1204, 1203, 27, 1201, 100, 534, 1199,
	1198, 1196, 1189, 57, 899, 1951, 12, 79, 1188, 1187,
	1186, 2849, 50, 53, 16, 1181, 1178, 1174, 29, 94,
	39, 1173, 1170, 36, 1169, 1167, 1165, 1163, 1162, 1161,
	1160, 25, 1159, 1158, 1157, 17, 22, 1156, 1153, 68,
	28, 1152, 1150, 1149, 47, 71, 1148, 1147, 48, 1146,
	1142, 26, 1141, 1140, 1138, 1137, 1136, 34, 7, 1135,
	21, 1134, 11, 1132, 24, 1117, 4, 1116, 9, 1115,
	3, 0, 1112, 5, 40, 1111, 1, 1095, 2, 1094,
	1093, 1833, 1098, 92, 1089, 93,
}
var yyR1 = [...]int{

	0, 209, 210, 210, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 201,
	201, 201, 20, 3, 3, 3, 3, 2, 2, 8,
	4, 5, 5, 9, 9, 35, 35, 10, 11, 11,
	11, 11, 213, 213, 58, 58, 59, 59, 106, 106,
	12, 13, 13, 115, 115, 114, 114, 114, 116, 116,
	116, 116, 151, 151, 14, 14, 14, 14, 14, 14,
	14, 203, 203, 202, 200, 200, 199, 199, 198, 21,
	183, 185, 185, 184, 184, 184, 184, 175, 154, 154,
	154, 154, 157, 157, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 156, 156, 156, 156, 156, 158, 158,
	158, 158, 158, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 160, 160,
	160, 160, 160, 160, 160, 160, 174, 174, 161, 161,
	169, 169, 170, 170, 170, 167, 167, 168, 168, 171,
	171, 171, 163, 163, 164, 164, 172, 172, 165, 165,
	165, 166, 166, 166, 173, 173, 173, 173, 173, 162,
	162, 176, 176, 193, 193, 192, 192, 192, 182, 182,
	189, 189, 189, 189, 189, 179, 179, 179, 180, 180,
	178, 178, 181, 181, 191, 191, 190, 177, 177, 194,
	194, 194, 194, 207, 208, 206, 206, 206, 206, 206,
	186, 186, 186, 187, 187, 187, 188, 188, 188, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	197, 195, 195, 196, 196, 16, 22, 22, 17, 17,
	17, 17, 17, 18, 18, 23, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 205, 205, 122, 122, 124, 124, 120,
	120, 123, 123, 121, 121, 121, 125, 125, 125, 126,
	126, 152, 152, 152, 25, 25, 27, 27, 28, 29,
	29, 146, 146, 147, 147, 30, 31, 36, 36, 36,
	36, 36, 36, 38, 38, 38, 7, 7, 7, 7,
	37, 37, 37, 6, 6, 26, 26, 26, 26, 19,
	214, 32, 33, 33, 34, 34, 34, 40, 40, 40,
	39, 39, 39, 45, 45, 47, 47, 47, 47, 47,
	48, 48, 48, 48, 48, 48, 44, 44, 46, 46,
	46, 46, 138, 138, 138, 137, 137, 50, 50, 51,
	51, 52, 52, 53, 53, 53, 90, 67, 67, 105,
	105, 107, 107, 54, 54, 54, 54, 55, 55, 56,
	56, 57, 57, 145, 145, 144, 144, 144, 143, 143,
	60, 60, 60, 62, 61, 61, 61, 61, 63, 63,
	65, 65, 64, 64, 66, 68, 68, 68, 68, 68,
	69, 69, 49, 49, 49, 49, 49, 49, 49, 49,
	119, 119, 71, 71, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 82, 82, 82, 82, 82, 82,
	72, 72, 72, 72, 72, 72, 72, 43, 43, 83,
	83, 83, 89, 84, 84, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 79,
	79, 79, 79, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 215, 215, 81, 80, 80, 80, 80, 80,
	80, 80, 41, 41, 41, 41, 41, 150, 150, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 94, 94, 42, 42, 92, 92, 93, 95,
	95, 91, 91, 91, 74, 74, 74, 74, 74, 74,
	74, 74, 76, 76, 76, 96, 96, 97, 97, 98,
	98, 99, 99, 100, 101, 101, 101, 102, 102, 102,
	102, 103, 103, 103, 73, 73, 73, 73, 104, 104,
	104, 104, 108, 108, 85, 85, 87, 87, 86, 88,
	109, 109, 112, 110, 110, 110, 113, 113, 113, 113,
	111, 111, 111, 140, 140, 140, 117, 117, 127, 127,
	128, 128, 118, 118, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 130, 130, 130, 131, 131, 132,
	132, 132, 139, 139, 135, 135, 136, 136, 141, 141,
	142, 142, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 211, 212, 148, 149, 149, 149,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 2, 4, 6, 6, 7, 4, 6, 5,
	8, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 0, 4,
	3, 5, 4, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 2, 8, 4, 6, 5,
	5, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 2, 4, 1, 3, 3, 3, 8, 3, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 1, 4, 4, 2, 2, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 0,
	1, 2, 0, 2, 0, 3, 0, 1, 0, 3,
	3, 0, 2, 2, 0, 2, 1, 2, 1, 0,
	2, 5, 4, 1, 2, 2, 3, 2, 0, 1,
	2, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 3, 2, 3, 1, 10,
	11, 11, 12, 3, 3, 1, 1, 2, 2, 2,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	7, 7, 7, 7, 4, 5, 4, 4, 7, 5,
	5, 5, 12, 7, 5, 9, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 3, 3, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 3, 4,
	4, 4, 4, 4, 4, 3, 2, 7, 2, 3,
	4, 3, 7, 5, 4, 2, 4, 4, 3, 3,
	5, 2, 3, 1, 1, 1, 1, 0, 1, 0,
	1, 1, 1, 0, 2, 2, 0, 2, 2, 0,
	2, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	5, 0, 1, 0, 1, 2, 3, 0, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 3, 3, 2, 2, 3, 3, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 1, 2, 3, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 3, 7, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 3, 0, 5, 4, 5, 5,
	0, 2, 1, 3, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 4,
	5, 5, 6, 4, 4, 6, 6, 6, 8, 8,
	8, 8, 9, 8, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	8, 8, 0, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 5, 4, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 2, 3, 3, 3, 3, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -209, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -23, -24, -25, -27, -28,
	-29, -30, -31, -6, -26, -19, -20, -4, -211, 6,
	7, -35, 9, 10, 30, -21, 123, 124, 126, 125,
	159, 127, 152, 53, 173, 174, 176, 177, 178, 179,
	-38, 157, 158, 31, 32, 129, 34, 57, 8, 263,
	154, 153, 25, -210, 365, -34, 5, -98, 15, -3,
	-32, -214, -32, -32, -32, -32, -32, -183, -185, 57,
	96, -132, 133, 77, 255, 130, 131, 137, -135, -201,
	-134, 60, 61, 62, 273, 145, 305, 306, 173, 187,
	181, 208, 200, 274, 307, 146, 198, 201, 242, 143,
	308, 228, 236, 71, 176, 251, 309, 155, 196, 192,
	310, 282, 190, 27, 311, 238, 213, 312, 278, 240,
	191, 237, 129, 313, 148, 141, 314, 214, 218, 315,
	243, 316, 317, 318, 185, 186, 319, 144, 245, 212,
	142, 33, 275, 37, 163, 246, 216, 320, 211, 207,
	321, 322, 323, 324, 210, 184, 206, 41, 220, 219,
	221, 241, 203, 325, 326, 327, 149, 328, 193, 18,
	329, 330, 331, 332, 333, 249, 158, 334, 161, 335,
	336, 337, 338, 339, 340, 239, 215, 217, 138, 165,
	235, 277, 341, 247, 189, 342, 150, 162, 157, 250,
	151, 343, 344, 345, 346, 347, 348, 349, 177, 350,
	351, 352, 353, 172, 244, 253, 40, 225, 354, 183,
	140, 355, 174, 169, 231, 204, 164, 356, 357, 194,
	195, 209, 182, 205, 175, 166, 159, 358, 252, 226,
	279, 202, 199, 170, 359, 167, 168, 360, 232, 233,
	171, 276, 248, 197, 227, -118, 133, 255, 130, 233,
	135, 131, 131, 132, 133, 255, 130, 131, -64, -141,
	-201, -134, 133, 131, 114, 201, 242, 123, -205, 238,
	-124, 239, 165, -152, 131, -120, 228, 232, 233, 171,
	-201, 229, 230, 240, 244, 243, 234, -141, 175, -146,
	180, -135, 178, -64, -36, 361, 127, -148, -148, 231,
	231, -148, -84, -49, -70, 80, -75, 29, 23, -74,
	-71, -91, -88, -89, 114, 115, 117, 116, 118, 103,
	104, 111, 81, 119, -79, -77, -78, -80, 64, 63,
	72, 65, 66, 67, 68, 73, 74, 75, -135, -141,
	-86, -211, 47, 48, 264, 265, 266, 267, 272, 268,
	83, 36, 254, 262, 261, 260, 258, 259, 256, 257,
	270, 271, 136, 255, 130, 109, 263, -201, -134, -5,
	-4, -211, 6, 20, 21, -102, 17, 16, -212, 59,
	-40, -47, 42, 43, -48, 21, 35, 46, 44, -33,
	-46, 105, -49, -141, -118, -118, 11, -58, -59, -64,
	-66, -141, -110, -151, 175, -113, 244, 243, -136, -111,
	-135, -133, 242, 201, 241, 128, 280, 79, 22, 24,
	223, 82, 114, 16, 83, 113, 264, 123, 51, 281,
	256, 257, 254, 266, 267, 255, 229, 29, 10, 283,
	25, 153, 21, 35, 107, 125, 86, 87, 156, 23,
	154, 75, 286, 19, 54, 11, 13, 287, 288, 14,
	136, 135, 98, 132, 49, 8, 119, 26, 95, 45,
	289, 28, 290, 291, 292, 293, 47, 96, 17, 258,
	259, 31, 294, 272, 160, 109, 52, 38, 80, 295,
	296, 73, 297, 76, 55, 77, 15, 50, 298, 299,
	300, 301, 97, 126, 263, 48, 302, 130, 6, 269,
	30, 152, 46, 303, 131, 85, 270, 271, 134, 74,
	5, 137, 32, 9, 53, 56, 260, 261, 262, 36,
	84, 12, 304, 78, -184, 96, -175, -201, -64, 132,
	-64, 263, -128, 136, -128, -128, 131, -64, -201, -201,
	123, 125, 128, 55, -22, -64, -127, 136, -201, -127,
	-127, -127, -64, 120, -64, -201, 30, -125, 96, 12,
	255, -201, 165, 131, 166, 133, -125, -179, 132, 33,
	144, -149, -211, -136, 169, 170, -149, -123, -122, 236,
	237, 231, 235, 12, 170, 231, 168, -149, 134, -135,
	-37, -135, 64, -7, -3, -10, -9, -11, 88, -148,
	-148, 58, 79, 77, 78, 95, -49, -72, 98, 80,
	96, 97, 82, 100, 99, 110, 103, 104, 105, 106,
	107, 108, 109, 101, 102, 113, 88, 89, 90, 91,
	92, 93, 94, -119, -211, -89, -211, 121, 122, -75,
	-75, -75, -75, -75, -75, -75, -75, -75, -75, -211,
	120, -2, -84, -4, -211, -211, -211, -211, -211, -211,
	-211, -211, -94, -49, -211, -215, -81, -211, -215, -81,
	-215, -81, -215, -211, -215, -81, -215, -81, -215, -215,
	-81, -211, -211, -211, -211, -211, -211, -211, -98, -3,
	-32, -103, 19, 31, -49, -99, -100, -49, -98, 38,
	-44, -46, -48, 42, 43, 70, 11, -138, -137, 22,
	-135, 64, 120, -65, 26, -64, -51, -52, -53, -54,
	-67, -90, -211, -64, -64, -58, -213, 58, 11, 56,
	-213, 58, 120, 58, 175, -113, -115, -114, 245, 247,
	88, -140, -135, 64, 29, 30, 59, 58, -64, -154,
	-157, -159, -158, -160, -155, -156, 198, 199, 114, 202,
	204, 205, 206, 207, 208, 209, 210, 211, 212, 213,
	30, 155, 194, 195, 196, 197, 214, 215, 216, 217,
	218, 219, 220, 221, 181, 200, 274, 182, 183, 184,
	185, 186, 187, 189, 190, 191, 192, 193, -201, -149,
	133, -201, 80, -201, -64, -64, -149, -149, -149, 167,
	167, 131, 131, 172, -64, 58, 134, -58, 23, 55,
	-64, -201, -201, -142, -141, -133, -149, -125, 64, -49,
	-149, -149, -149, -64, -149, -149, -180, 11, 98, -149,
	-149, 11, -121, 11, 98, -49, -126, 96, 55, -147,
	178, 212, 362, 363, 364, -49, -49, -49, -49, -82,
	73, 80, 74, 75, -75, -83, -86, -89, 69, 98,
	96, 97, 82, -75, -75, -75, -75, -75, -75, -75,
	-75, -75, -75, -75, -75, -75, -75, -75, -150, -201,
	64, -201, -74, -74, -135, -45, 21, 35, -44, -136,
	-142, -133, -34, -212, -212, -98, -44, -44, -49, -49,
	-91, 64, -44, -91, 64, -44, -44, -39, 21, 35,
	-92, -93, 84, -91, -135, -141, -212, -75, -135, -135,
	-44, -45, -45, -44, -44, -102, -212, 9, 98, 58,
	18, 58, -101, 24, 25, -102, -76, -135, 65, 68,
	-50, 58, 11, -48, -64, -137, 105, -142, -106, 161,
	-64, 30, 58, -60, -62, -61, -63, 45, 49, 51,
	46, 47, 48, 52, -145, 22, -51, -3, -211, -144,
	161, -143, 22, -141, 64, -106, 56, -51, -64, -51,
	-66, -141, 105, -113, -115, 58, 246, 248, 249, 55,
	76, -49, -166, 113, -186, -187, -188, -136, 64, 65,
	-175, -176, -177, -189, 147, -194, 138, 140, 137, -178,
	148, 132, 28, 59, -171, 73, 80, -167, 226, -161,
	57, -161, -161, -161, -161, -165, 201, -165, -165, -165,
	57, 57, -161, -161, -161, -169, 57, -169, -169, -170,
	57, -170, -139, 56, -64, -149, 23, -149, -129, 128,
	125, 126, -197, 124, 223, 201, 71, 29, 15, 264,
	161, 279, -201, 162, -64, -64, -64, -64, -64, 128,
	125, -64, -64, -64, -149, -64, -64, -125, -141, -141,
	64, -64, -135, 73, 74, 75, -83, -75, -75, -75,
	-43, 156, 79, -212, -212, -44, -44, -211, 120, -5,
	-102, -212, -212, 58, 56, 22, 11, 11, -212, 11,
	11, -212, -212, -44, -95, -93, 86, -49, -212, 120,
	-212, 58, 58, -212, -212, -212, -212, -212, -103, 40,
	-49, -49, -100, -103, -117, 19, 11, 36, 36, -69,
	12, -46, -51, -48, 120, -73, 30, 36, -3, -211,
	-211, -109, -112, -91, -52, -53, -53, -52, -53, 45,
	45, 45, 50, 45, 50, 45, -61, -141, -212, -212,
	-3, -68, 53, 135, 54, -211, -143, -69, -51, -69,
	-69, 120, -114, -116, 250, 247, 253, -201, 64, 58,
	-188, 88, 57, -201, 28, -178, -178, -181, -201, -181,
	28, -163, 29, 73, -168, 227, 65, -165, -165, -166,
	30, -166, -166, -166, -174, 64, -174, 65, 65, 55,
	-135, -149, -148, -204, 143, 139, 147, 148, 141, 60,
	61, 62, 132, 28, 138, 140, 161, 137, -204, -130,
	-131, 134, 22, 132, 28, 161, -203, 56, 167, 223,
	167, 134, -149, -121, -121, -43, 79, -75, -75, -212,
	-212, -45, -136, -98, -103, -153, 114, 198, 155, 196,
	192, 212, 203, 225, 194, 226, -150, -153, -75, -75,
	-75, -75, 273, -98, 87, -49, 85, -136, -75, -75,
	41, -64, -96, 13, -49, 105, -108, 55, -109, -85,
	-87, -86, -211, -104, -135, -107, -135, -69, 58, 88,
	-56, -55, 55, 56, -57, 55, -55, 45, 45, -212,
	132, 132, 132, -107, -98, -69, 247, 251, 252, -187,
	-188, -191, -190, -135, -194, -181, -181, 57, -164, 55,
	-75, 59, -166, -166, -201, 114, 59, 58, 59, 58,
	59, 58, -64, -148, -148, -64, -148, -135, -200, 276,
	-202, -201, -135, -135, -135, -64, -125, -125, -75, -212,
	-102, -212, -161, -161, -161, -170, -161, 186, -161, 186,
	-212, -212, 19, 19, 19, 19, -211, -42, 269, -49,
	58, 58, -97, 14, 16, 27, -108, 58, -212, -212,
	58, 120, -212, 58, -98, -112, -49, -49, 57, -49,
	-211, -211, -211, -212, -102, 59, 58, -161, -105, -135,
	-172, 223, 9, -165, 64, -165, 65, 65, -149, 26,
	-199, -198, -136, 57, 56, -103, -165, -201, -75, -75,
	-75, -75, -75, -102, 64, -75, -75, -49, -84, 28,
	-87, 36, -3, -135, -135, -135, -102, -105, -105, -212,
	-105, -105, -144, -193, -192, 56, 142, 71, -190, 59,
	58, -173, 138, 28, 137, -78, -166, -166, 59, 59,
	-211, 58, 88, -105, -64, -212, -212, -212, -212, -41,
	98, 276, -212, -212, -212, 9, -85, 120, 59, -212,
	-212, -212, -68, -192, -201, -182, 88, 64, 150, -135,
	-162, 71, 28, 28, -195, -196, 161, -198, -188, 59,
	-212, 274, 52, 277, -109, -135, 65, -64, 64, -212,
	58, -135, -203, 41, 275, 278, 57, -196, 36, -200,
	41, -105, 163, 276, 59, 164, 277, -207, -208, 55,
	-211, 278, -208, 55, 10, 9, -75, 160, -206, 151,
	146, 149, 30, -206, -212, -212, 145, 29, 73,
}
var yyDef = [...]int{

	28, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 619, 0, 360,
	360, 360, 360, 360, 360, 0, 689, 672, 0, 0,
	0, 0, -2, 325, 326, 0, 328, -2, 0, 0,
	337, 995, 995, 0, 0, 995, 0, 993, 45, 46,
	343, 344, 345, 1, 3, 0, 364, 627, 0, 0,
	-2, 362, 0, 672, 672, 0, 0, 74, 75, 0,
	0, 0, 982, 0, 670, 670, 670, 690, 691, 694,
	695, 29, 30, 31, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 0, 0, 0, 0, 0,
	673, 0, 668, 0, 668, 668, 668, 0, 274, 442,
	698, 699, 982, 0, 0, 0, 316, 0, 316, 286,
	0, 288, 996, 0, 996, 0, 295, 0, 0, 301,
	996, 303, 304, 308, 322, 323, 310, 324, 327, 0,
	332, 335, 0, 350, 0, 0, 342, 355, 356, 995,
	995, 359, 32, 493, 452, 0, 458, 460, 0, 495,
	496, 497, 498, 499, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 525, 526, 527, 528, 604, 605,
	606, 607, 608, 609, 610, 611, 462, 463, 601, 0,
	649, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 0, 562, 562, 562, 562, 562, 562, 562, 562,
	0, 0, 0, 0, 0, 0, 0, -2, -2, 619,
	41, 0, 360, 365, 366, 631, 0, 0, 619, 994,
	0, 0, -2, -2, 376, 382, 383, 384, 385, 361,
	0, 388, 392, 0, 0, 0, 0, 0, 0, 54,
	56, 442, 60, 0, 971, 653, -2, -2, 0, 0,
	696, 697, -2, 834, -2, 702, 703, 704, 705, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 0, 0, 93, 0, 91, 0,
	996, 0, 0, 0, 0, 0, 0, 996, 996, 996,
	0, 0, 0, 0, 265, 0, 0, 0, 0, 0,
	0, 0, 273, 0, 275, 996, 316, 278, 0, 0,
	996, 996, 996, 0, 996, 996, 285, 0, 195, 196,
	197, 289, 997, 998, 996, 996, 291, 0, 313, 311,
	312, 305, 306, 0, 319, 298, 299, 302, 333, 336,
	353, 351, 352, 354, 346, 347, 348, 349, 0, 357,
	358, 0, 0, 0, 0, 0, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 480, 481, 482, 483,
	484, 485, 486, 459, 0, 473, 0, 0, 0, 515,
	516, 517, 518, 519, 520, 521, 522, 523, 0, 373,
	0, 0, 0, 619, 0, 0, 0, 0, 0, 0,
	0, 370, 0, 593, 0, 546, 554, 0, 547, 555,
	548, 556, 549, 0, 550, 557, 551, 558, 552, 553,
	559, 0, 0, 0, 373, 373, 0, 0, 627, 0,
	375, 33, 0, 0, 628, 620, 621, 624, 627, 0,
	397, 386, 377, 380, 381, 363, 0, 389, 393, 0,
	395, 396, 0, 58, 0, 441, 0, 399, 401, 402,
	403, 423, 0, 425, -2, 0, 0, 0, 52, 53,
	0, 0, 0, 0, 971, 654, 62, 63, 0, 0,
	0, 171, 663, 664, 665, 661, 220, 0, 0, 159,
	155, 99, 100, 101, 148, 103, 148, 148, 148, 148,
	168, 168, 168, 168, 131, 132, 133, 134, 135, 0,
	0, 118, 148, 148, 148, 122, 138, 139, 140, 141,
	142, 143, 144, 145, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 150, 150, 150, 152, 152, 692, 77,
	0, 996, 0, 996, 89, 0, 234, 236, 237, 0,
	0, 0, 0, 0, 0, 0, 0, 268, 669, 0,
	996, 271, 272, 443, 700, 701, 276, 277, 317, 318,
	279, 280, 281, 282, 283, 284, 0, 198, 199, 290,
	294, 0, 316, 0, 0, 296, 297, 0, 0, 0,
	334, 338, 339, 340, 341, 494, 453, 454, 455, 457,
	474, 0, 476, 478, 464, 465, 489, 490, 491, 0,
	0, 0, 0, 487, 469, 0, 500, 501, 502, 503,
	504, 505, 506, 507, 508, 509, 510, 511, 514, 577,
	578, 0, 512, 513, 524, 0, 0, 0, 374, 602,
	0, -2, 0, 492, 648, 627, 0, 0, 0, 0,
	497, 604, 0, 497, 604, 0, 0, 0, 371, 372,
	599, 596, 0, 0, 601, 0, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 631, 42, 632, 0, 0,
	0, 0, 623, 625, 626, 631, 0, 612, 0, 0,
	450, 0, 0, 378, 39, 394, 390, 0, 0, 0,
	440, 0, 0, 0, 0, 0, 0, 430, 0, 0,
	433, 0, 0, 0, 0, 424, 0, 0, 0, 445,
	915, 426, 0, 428, 429, 450, 0, 450, 55, 450,
	57, 0, 444, 655, 61, 0, 0, 66, 67, 656,
	657, 658, 659, 0, 90, 221, 223, 226, 227, 228,
	94, 95, 96, 0, 0, 208, 0, 0, 202, 202,
	0, 200, 201, 92, 162, 160, 0, 157, 156, 102,
	0, 168, 168, 125, 126, 171, 0, 171, 171, 171,
	0, 0, 119, 120, 121, 113, 0, 114, 115, 116,
	0, 117, 0, 0, 996, 79, 671, 80, 995, 0,
	0, 684, 235, 674, 675, 676, 677, 678, 679, 680,
	681, 682, 683, 0, 81, 239, 241, 240, 244, 0,
	0, 0, 266, 996, 270, 313, 313, 293, 314, 315,
	320, 300, 330, 475, 477, 479, 466, 487, 470, 0,
	467, 0, 0, 461, 529, 0, 0, 373, 0, 619,
	631, 533, 534, 0, 0, 0, 0, 0, 570, 0,
	0, 571, 0, 619, 0, 597, 0, 0, 545, 0,
	564, 0, 0, 565, 566, 567, 568, 569, 35, 0,
	629, 630, 622, 34, 0, 666, 667, 613, 614, 615,
	0, 387, 398, 379, 0, 642, 0, 0, 635, 0,
	0, 450, 650, 0, 400, 419, 421, 0, 416, 431,
	432, 434, 0, 436, 0, 438, 439, 404, 405, 406,
	0, 407, 0, 0, 0, 0, 427, 619, 450, 50,
	51, 0, 64, 65, 0, 0, 71, 172, 173, 0,
	224, 0, 0, 0, 190, 202, 202, 193, 203, 194,
	0, 164, 0, 161, 98, 158, 0, 171, 171, 127,
	0, 128, 129, 130, 0, 146, 0, 0, 0, 0,
	693, 78, 229, 995, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 258, 259, 995, 0,
	995, 685, 686, 687, 688, 0, 84, 0, 0, 0,
	0, 0, 269, 316, 316, 468, 0, 488, 471, 530,
	531, 0, 603, 627, 37, 0, 148, 148, 582, 148,
	152, 585, 148, 587, 148, 590, 0, 0, 0, 0,
	0, 0, 0, 594, 544, 600, 0, 602, 0, 0,
	633, 36, 617, 0, 451, 391, 43, 0, 642, 634,
	644, 646, 0, 0, 638, 0, 411, 619, 0, 0,
	413, 420, 0, 0, 414, 0, 415, 435, 437, -2,
	0, 0, 0, 0, 627, 49, 68, 69, 70, 222,
	225, 0, 204, 148, 207, 191, 192, 0, 166, 0,
	163, 149, 123, 124, 169, 170, 168, 0, 168, 0,
	153, 0, 996, 230, 231, 232, 233, 0, 238, 0,
	82, 83, 0, 0, 243, 267, 287, 292, 472, 532,
	631, 535, 579, 168, 583, 584, 586, 588, 589, 591,
	537, 536, 0, 0, 0, 0, 0, 627, 0, 598,
	0, 0, 40, 0, 0, 0, 44, 0, 647, 0,
	0, 0, 59, 0, 627, 651, 652, 417, 0, 422,
	0, 0, 0, 425, 48, 182, 0, 206, 0, 409,
	174, 167, 0, 171, 147, 171, 0, 0, 76, 0,
	85, 86, 0, 0, 0, 38, 580, 581, 0, 0,
	0, 0, 572, 0, 595, 0, 0, 618, 616, 0,
	645, 0, 637, 640, 639, 412, 47, 0, 0, 447,
	0, 0, 445, 181, 183, 0, 188, 0, 205, 0,
	0, 179, 0, 176, 178, 165, 136, 137, 151, 154,
	0, 0, 0, 0, 245, 538, 540, 539, 541, 0,
	0, 0, 543, 560, 561, 0, 636, 0, 418, 446,
	448, 449, 408, 184, 185, 0, 189, 187, 0, 410,
	97, 0, 175, 177, 0, 261, 0, 87, 88, 81,
	542, 0, 0, 0, 643, 641, 186, 0, 180, 260,
	0, 0, 84, 573, 0, 576, 0, 262, 0, 242,
	574, 0, 0, 0, 209, 0, 0, 210, 211, 0,
	0, 575, 212, 0, 0, 0, 0, 0, 213, 215,
	216, 0, 0, 214, 263, 264, 217, 218, 219,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 81, 3, 3, 3, 108, 100, 3,
	57, 59, 105, 103, 58, 104, 120, 106, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 365,
	89, 88, 90, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 110, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 111,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 82, 83, 84, 85,
	86, 87, 91, 92, 93, 94, 95, 96, 97, 98,
	101, 102, 107, 109, 112, 113, 114, 115, 116, 117,
	118, 119, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:337
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:342
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:343
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:347
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:374
		{
			setParseTree(yylex, nil)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:380
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:384
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:388
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:394
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:400
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:408
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:412
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:416
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:439
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:447
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:453
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:461
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:467
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:471
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:478
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:490
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:502
		{
			yyVAL.str = InsertStr
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:506
		{
			yyVAL.str = ReplaceStr
		}
	case 47:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:512
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:518
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:522
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:526
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:530
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:535
		{
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:536
		{
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:540
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:544
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:550
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:554
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:559
		{
			yyVAL.partitions = nil
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:563
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:569
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:575
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:579
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:585
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:589
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:595
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:599
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:603
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:609
		{
			yyVAL.str = RepeatableRead
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:613
		{
			yyVAL.str = ReadCommitted
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:617
		{
			yyVAL.str = ReadUncommitted
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:621
		{
			yyVAL.str = Serializable
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:627
		{
			yyVAL.str = SessionStr
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:631
		{
			yyVAL.str = GlobalStr
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:637
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:642
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 76:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:648
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:653
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:657
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:661
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:665
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:670
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:674
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:680
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:685
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:690
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:696
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:701
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:707
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:713
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:720
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:727
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:731
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:737
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:742
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:746
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:750
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:756
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:767
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:778
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:783
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 137:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:944
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:948
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:952
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:956
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:964
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:968
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:972
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:978
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:983
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:988
		{
			yyVAL.sqlVal = nil
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:992
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:997
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1001
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1009
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1013
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1019
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1027
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1031
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1036
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1040
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1046
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1050
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1054
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1059
		{
			yyVAL.optVal = nil
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1063
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1068
		{
			yyVAL.optVal = nil
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1072
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1077
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1081
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1086
		{
			yyVAL.str = ""
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1090
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1094
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1099
		{
			yyVAL.str = ""
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1103
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1107
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1112
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1116
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1120
		{
			yyVAL.colKeyOpt = colKey
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1124
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1128
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1133
		{
			yyVAL.sqlVal = nil
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1137
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1143
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1147
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1153
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1157
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1163
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1167
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1172
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1178
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1182
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1188
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1192
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1196
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1200
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1204
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1210
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1214
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1218
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1225
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1229
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1235
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1239
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1244
		{
			yyVAL.str = ""
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1248
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1254
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1258
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1264
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1270
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1274
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 209:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1281
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 210:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1285
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 211:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1289
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 212:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1293
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1299
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1305
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1311
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1315
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1319
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1323
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1327
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1332
		{
			yyVAL.str = ""
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1336
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1340
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1348
		{
			yyVAL.str = yyDollar[1].str
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1352
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1356
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1362
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1366
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1370
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1376
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1380
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1384
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1388
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 233:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1393
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1398
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1402
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1406
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1410
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1414
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1426
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1436
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1440
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 242:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1444
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 243:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1457
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 244:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1467
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 245:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1471
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 260:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1500
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1506
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1510
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 263:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1516
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 264:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1520
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1526
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1532
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1536
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1544
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 269:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1552
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1557
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1565
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1569
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1575
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1579
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1584
		{
			yyVAL.statement = &OtherRead{}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1590
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1595
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1600
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1605
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1610
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1614
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1618
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1622
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1626
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1630
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1635
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1639
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1644
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1648
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1652
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1656
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1660
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 293:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1665
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1675
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1679
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1683
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1687
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1692
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1696
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1700
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1704
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1718
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String())}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1728
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1732
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1738
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1742
		{
			yyVAL.str = "extended "
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1748
		{
			yyVAL.str = ""
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1752
		{
			yyVAL.str = "full "
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1758
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1762
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1768
		{
			yyVAL.str = ""
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1772
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1776
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1782
		{
			yyVAL.showFilter = nil
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1786
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1790
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1796
		{
			yyVAL.showFilter = nil
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1800
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1806
		{
			yyVAL.str = ""
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1810
		{
			yyVAL.str = SessionStr
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1814
		{
			yyVAL.str = GlobalStr
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1820
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1824
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1830
		{
			yyVAL.statement = &Begin{}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1834
		{
			yyVAL.statement = &Begin{}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1840
		{
			yyVAL.statement = &Commit{}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1846
		{
			yyVAL.statement = &Rollback{}
		}
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1850
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1855
		{
			yyVAL.empty = struct{}{}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1857
		{
			yyVAL.empty = struct{}{}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1860
		{
			yyVAL.empty = struct{}{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1862
		{
			yyVAL.empty = struct{}{}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1867
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1873
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1878
		{
			yyVAL.str = ""
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1882
		{
			yyVAL.str = JSONStr
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1886
		{
			yyVAL.str = TreeStr
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1890
		{
			yyVAL.str = VitessStr
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1894
		{
			yyVAL.str = TraditionalStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1898
		{
			yyVAL.str = AnalyzeStr
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1904
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1908
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1912
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1918
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1922
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1926
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1930
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1935
		{
			yyVAL.str = ""
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1939
		{
			yyVAL.str = ""
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1943
		{
			yyVAL.str = ""
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1949
		{
			yyVAL.statement = &OtherRead{}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1953
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1959
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1963
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1967
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1971
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1977
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1981
		{
			setAllowComments(yylex, true)
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1985
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1991
		{
			yyVAL.bytes2 = nil
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1995
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2001
		{
			yyVAL.str = UnionStr
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2005
		{
			yyVAL.str = UnionAllStr
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2009
		{
			yyVAL.str = UnionDistinctStr
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2014
		{
			yyVAL.str = ""
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2018
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2022
		{
			yyVAL.str = SQLCacheStr
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2027
		{
			yyVAL.str = ""
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2031
		{
			yyVAL.str = DistinctStr
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2035
		{
			yyVAL.str = DistinctStr
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2040
		{
			yyVAL.selectExprs = nil
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2044
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2049
		{
			yyVAL.strs = nil
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2053
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2057
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2061
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2065
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2071
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2075
		{
			yyVAL.str = SQLCacheStr
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2079
		{
			yyVAL.str = DistinctStr
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2083
		{
			yyVAL.str = DistinctStr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2087
		{
			yyVAL.str = StraightJoinHint
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2091
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2097
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2101
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2107
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2111
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2115
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 391:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2119
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2124
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2128
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2132
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2139
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2144
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2148
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2154
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2158
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2168
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2172
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2176
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2182
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2188
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 408:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2192
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2198
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2202
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2208
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2212
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2225
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2229
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2233
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2237
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2243
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2245
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2249
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2251
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2255
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2257
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2260
		{
			yyVAL.empty = struct{}{}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2262
		{
			yyVAL.empty = struct{}{}
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2265
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2269
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2273
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2280
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2286
		{
			yyVAL.str = JoinStr
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2290
		{
			yyVAL.str = JoinStr
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2294
		{
			yyVAL.str = JoinStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2300
		{
			yyVAL.str = StraightJoinStr
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2306
		{
			yyVAL.str = LeftJoinStr
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2310
		{
			yyVAL.str = LeftJoinStr
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2314
		{
			yyVAL.str = RightJoinStr
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2318
		{
			yyVAL.str = RightJoinStr
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2324
		{
			yyVAL.str = NaturalJoinStr
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2328
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2338
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2342
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2348
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2352
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2358
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2363
		{
			yyVAL.indexHints = nil
		}
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2367
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2371
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 448:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2375
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 449:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2379
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2384
		{
			yyVAL.expr = nil
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2388
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2394
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2398
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2402
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2406
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2410
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2414
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2418
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2422
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2428
		{
			yyVAL.str = ""
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2432
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2438
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2442
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2448
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2452
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2456
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2460
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 468:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2464
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2468
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2472
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 471:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2476
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 472:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2480
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2484
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2490
		{
			yyVAL.str = IsNullStr
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2494
		{
			yyVAL.str = IsNotNullStr
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2498
		{
			yyVAL.str = IsTrueStr
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2502
		{
			yyVAL.str = IsNotTrueStr
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2506
		{
			yyVAL.str = IsFalseStr
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2510
		{
			yyVAL.str = IsNotFalseStr
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2516
		{
			yyVAL.str = EqualStr
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2520
		{
			yyVAL.str = LessThanStr
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2524
		{
			yyVAL.str = GreaterThanStr
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2528
		{
			yyVAL.str = LessEqualStr
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2532
		{
			yyVAL.str = GreaterEqualStr
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2536
		{
			yyVAL.str = NotEqualStr
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2540
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2545
		{
			yyVAL.expr = nil
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2549
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2555
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2559
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2563
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2569
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2575
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2579
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2585
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2589
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2593
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2597
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2601
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2605
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2609
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2613
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2617
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2621
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2625
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2629
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2633
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2637
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2641
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2645
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2649
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2653
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2657
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2661
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2665
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2669
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2673
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Str, Expr: yyDollar[2].expr}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2677
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2681
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Str, Expr: yyDollar[2].expr}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2685
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2693
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2707
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2711
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2715
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2733
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2737
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 531:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2741
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 532:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2745
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2755
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2759
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 535:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2763
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 536:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2767
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 537:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2771
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 538:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2775
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 539:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2779
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 540:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2783
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 541:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2787
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 542:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2791
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 543:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2795
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2799
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2803
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2813
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2817
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2821
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2831
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2836
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2842
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2847
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2852
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2856
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2860
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2865
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2870
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2875
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 560:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2879
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 561:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2883
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2893
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2903
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2907
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2911
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2915
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2919
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2923
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2927
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2933
		{
			yyVAL.str = ""
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2937
		{
			yyVAL.str = BooleanModeStr
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2941
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 575:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2945
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2949
		{
			yyVAL.str = QueryExpansionStr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2955
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2959
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2965
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2969
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2973
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2977
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2981
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2985
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2991
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2995
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2999
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3003
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3007
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3011
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3015
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3020
		{
			yyVAL.expr = nil
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3024
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3029
		{
			yyVAL.str = string("")
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3033
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3039
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3043
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3049
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3054
		{
			yyVAL.expr = nil
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3058
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3064
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3068
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 603:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3072
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3078
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3082
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3086
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3090
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3094
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3098
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3102
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3106
		{
			yyVAL.expr = &NullVal{}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3112
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3121
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3125
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3130
		{
			yyVAL.exprs = nil
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3134
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3139
		{
			yyVAL.expr = nil
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3143
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3148
		{
			yyVAL.orderBy = nil
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3152
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3158
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3162
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3168
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3173
		{
			yyVAL.str = AscScr
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3177
		{
			yyVAL.str = AscScr
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3181
		{
			yyVAL.str = DescScr
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3186
		{
			yyVAL.limit = nil
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3190
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3194
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3198
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3203
		{
			yyVAL.str = ""
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3207
		{
			yyVAL.str = ForUpdateStr
		}
	case 633:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3211
		{
			yyVAL.str = ShareModeStr
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3224
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3228
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 636:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3232
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3236
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3242
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3246
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3250
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 641:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3254
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3259
		{
			yyVAL.updateExprs = nil
		}
	case 643:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3263
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3269
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3273
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3279
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3283
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3289
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3295
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3305
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3309
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3315
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3321
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3325
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExprs = SetExprs{yyDollar[2].setExpr}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3330
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3336
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3340
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3344
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3348
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3355
		{
			yyVAL.bytes = []byte("charset")
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3362
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3366
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3370
		{
			yyVAL.expr = &Default{}
		}
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3379
		{
			yyVAL.byt = 0
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3381
		{
			yyVAL.byt = 1
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3384
		{
			yyVAL.empty = struct{}{}
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3386
		{
			yyVAL.empty = struct{}{}
		}
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3389
		{
			yyVAL.str = ""
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3391
		{
			yyVAL.str = IgnoreStr
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3395
		{
			yyVAL.empty = struct{}{}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3397
		{
			yyVAL.empty = struct{}{}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3399
		{
			yyVAL.empty = struct{}{}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3401
		{
			yyVAL.empty = struct{}{}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3403
		{
			yyVAL.empty = struct{}{}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3405
		{
			yyVAL.empty = struct{}{}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3407
		{
			yyVAL.empty = struct{}{}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3409
		{
			yyVAL.empty = struct{}{}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3411
		{
			yyVAL.empty = struct{}{}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3413
		{
			yyVAL.empty = struct{}{}
		}
	case 684:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3416
		{
			yyVAL.empty = struct{}{}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3418
		{
			yyVAL.empty = struct{}{}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3420
		{
			yyVAL.empty = struct{}{}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3424
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3426
		{
			yyVAL.empty = struct{}{}
		}
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3429
		{
			yyVAL.empty = struct{}{}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3431
		{
			yyVAL.empty = struct{}{}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3433
		{
			yyVAL.empty = struct{}{}
		}
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3436
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3438
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3442
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3446
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3453
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3459
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3463
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3470
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3787
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3796
		{
			decNesting(yylex)
		}
	case 995:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3801
		{
			skipToEnd(yylex)
		}
	case 996:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3806
		{
			skipToEnd(yylex)
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3810
		{
			skipToEnd(yylex)
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3814
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
